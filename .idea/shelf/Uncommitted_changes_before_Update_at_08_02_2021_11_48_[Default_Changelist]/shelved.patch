Index: app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.example.walktoshop.Model.Business;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SellerMapView extends FragmentActivity implements OnMapReadyCallback {\r\n\r\n    FirebaseFirestore db=FirebaseFirestore.getInstance();\r\n    private GoogleMap mMap;\r\n    private String UID = null;\r\n    private static final String API_KEY = \"AIzaSyBrbjgwm3CB6qBhWaa3cMrRV3Ek9XW0cPc\";\r\n    SearchView search;\r\n    String location;\r\n    boolean isExisting = false;\r\n    List<LatLng> latLngs = new ArrayList<LatLng>();\r\n    Business business=new Business();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_seller_map_view);\r\n\r\n        //riceve l'intent contenente l'identificatore univoco dell'utente\r\n        Intent intent = getIntent();\r\n        if(intent.hasExtra(\"UID\")){\r\n            UID=intent.getStringExtra(\"UID\");\r\n            SellerMapView.this.business.setOwnerUID(UID);\r\n        }\r\n\r\n        //il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);\r\n\r\n        search = findViewById(R.id.search_bar);\r\n        //inizializzazione delle places API\r\n        if(!Places.isInitialized()){\r\n            Places.initialize(getApplicationContext(),API_KEY);\r\n        }\r\n        PlacesClient client=Places.createClient(this);\r\n        /**\r\n         * viene settato un listener sulla SearchView che prende il nome della attività digitata dall'utente e utilizzando l'oggetto geodecoder\r\n         * ottiene la latitudine e la longitudine dell'attività altrimenti se la stringa digitata è vuota, non esiste oppure è stata digitata un attività già esistente\r\n         * verra mostrato un dialog che avvisa l'utente dell'errore commesso.\r\n         */\r\n        search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String s) {\r\n                location=search.getQuery().toString();\r\n                List<Address> addresses=null;\r\n                if(location!=null || !location.trim().equals(\"\")){\r\n                    Geocoder geocoder=new Geocoder(SellerMapView.this);\r\n                    try{\r\n                        addresses=geocoder.getFromLocationName(location,1);\r\n                        if(addresses.isEmpty()){\r\n                            dialog();\r\n                        }\r\n                    }catch(Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    if (addresses!=null && !addresses.isEmpty()){\r\n                        Address addr=addresses.get(0);\r\n                        verifyBusiness(addr);\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String s) {\r\n                return false;\r\n            }\r\n        });\r\n        mapFragment.getMapAsync(this);\r\n    }\r\n\r\n    /**\r\n     * Usa l'oggetto di tipo Address contenente latitudine, longitudine e locality di un determinato luogo per fare una query al db\r\n     * prendendo tutte le attività aventi come locality quella definita all'interno dell'oggetto di tipo Addresses, successivamente controlla\r\n     * le latitudini e longitudini di queste attività estratte dal db con quella dell'oggetto di tipo  Address e verifica se l'attività digitata dall'utente\r\n     * è già esistente o meno, nel caso in cui esista mostra all'utente un dialog che indica l'errore commesso, se invece è la prima volta che viene inserita, la mappa\r\n     * esegue uno  zoom sul marker corrispondente a latitudine e longitudine contenute nell'oggetto di tipo Address.\r\n     * @param addr\r\n     */\r\n    private void verifyBusiness(Address addr) {\r\n\r\n        double latitude = addr.getLatitude();\r\n        double longitude = addr.getLongitude();\r\n        LatLng placeLatLng = new LatLng(latitude,longitude);\r\n        String locality = addr.getLocality();\r\n\r\n        db.collection(\"attivita\").whereEqualTo(\"locality\", locality).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    for (QueryDocumentSnapshot document : task.getResult()){\r\n                        double lat = Double.parseDouble(document.getString(\"latitude\"));\r\n                        double longt = Double.parseDouble(document.getString(\"longitude\"));\r\n                        Log.d(\"DB-PLACE\", lat+\"-\"+longt);\r\n                        if(latitude == lat && longitude == longt){\r\n                            isExisting = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(isExisting == true){\r\n                        AlertDialog.Builder builder = new AlertDialog.Builder(SellerMapView.this);\r\n                        // Add the buttons\r\n                        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n\r\n                            }\r\n                        }).setMessage(R.string.allert_business_exist);\r\n                        builder.show();\r\n                        isExisting = false;\r\n                    } else {\r\n                        Log.d(\"place\",addr.getLatitude()+\"--\"+addr.getLongitude()+\"--\"+addr.getLocality());\r\n                        LatLng place=new LatLng(addr.getLatitude(),addr.getLongitude());\r\n                        mMap.addMarker(new MarkerOptions().position(place).title(location));\r\n                        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(place,15));\r\n                        Toast.makeText(SellerMapView.this, R.string.addBusinessDialog, Toast.LENGTH_LONG).show();\r\n\r\n                        /**\r\n                         *   quando l'utente clicca sul marker viene caricato l'oggetto di tipo business con le informazioni relative a latitudine\r\n                         *   longitudine, localita e business UID creato sommando la latitudine e la longitudine.\r\n                         */\r\n\r\n                        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                            @Override\r\n                            public boolean onMarkerClick(Marker marker) {\r\n                                if(SellerMapView.this.location.contains(\",\")){\r\n                                    String[] res = SellerMapView.this.location.split(\"[,]\", 0);\r\n                                    SellerMapView.this.location = res[0];\r\n                                }\r\n                                SellerMapView.this.business.setName(SellerMapView.this.location);\r\n                                SellerMapView.this.business.setLongitude(String.valueOf(addr.getLongitude()));\r\n                                SellerMapView.this.business.setLatitude(String.valueOf(addr.getLatitude()));\r\n                                SellerMapView.this.business.setLocality(addr.getLocality());\r\n                                SellerMapView.this.business.setUID(calculateMyBusinessCustomUID(addr.getLatitude(),addr.getLongitude()));\r\n                                setBusiness(SellerMapView.this.business);\r\n                                return false;\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    //in questo metodo viene settata la camera sull'italia\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        LatLng italy = new LatLng(43.06103001266056, 12.882105287940128);\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(italy));\r\n    }\r\n\r\n    //il metodo riceve l'oggetto business in input ed esegue una query che setta l' attività corrispondente all' identificatore univoco del business\r\n    private void setBusiness(Business business){\r\n\r\n        db.collection(\"attivita\").document(business.getUID()).set(this.business).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    getSeller(business.getUID());\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * metodo che aggiunge l'attività del venditore sul db con un custom UID\r\n     * @param businessCustomUID\r\n     */\r\n    private void getSeller(String businessCustomUID){\r\n        db.collection(\"venditore\").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    ArrayList<String> businessUID = (ArrayList<String>) document.get(\"businessUID\");\r\n                    if(businessUID == null)\r\n                    {\r\n                        businessUID = new ArrayList<>();\r\n                    }\r\n                    businessUID.add(businessCustomUID);\r\n                    Log.d(\"op\",businessUID.toString());\r\n                    updateSeller(businessUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * L'array di attività viene sovrascritto sul db con un nuovo array contenente l'attività agguiunta\r\n     * @param businessUID\r\n     */\r\n    private void updateSeller(ArrayList<String> businessUID){\r\n        db.collection(\"venditore\").document(UID).update(\"businessUID\",businessUID).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful())\r\n                {\r\n                    finish();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    //dialog mostrato quando la stringa digitata è vuota oppure non è stata trovata\r\n    private void dialog(){\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        // Add the buttons\r\n        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int id) {\r\n\r\n            }\r\n        }).setMessage(R.string.businessNotFound);\r\n        // Set other d\r\n        builder.show();\r\n    }\r\n    //viene calcolato l'UID del business appena digitato dall'utente come somma delle sue coordinate di latitudine e longitudine\r\n    private String calculateMyBusinessCustomUID(Double latitude,Double longitude){\r\n        if(latitude!=null && longitude!=null){\r\n            String customUID=null;\r\n            customUID= String.valueOf(latitude+longitude);\r\n            customUID =customUID.replaceAll(\"[^0-9]\", \"\");\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(date 1612776893926)
@@ -1,7 +1,9 @@
 package com.example.walktoshop.Seller;
 
 import androidx.annotation.NonNull;
+import androidx.appcompat.app.AppCompatActivity;
 import androidx.appcompat.widget.SearchView;
+import androidx.core.app.ActivityCompat;
 import androidx.fragment.app.FragmentActivity;
 
 import android.app.AlertDialog;
@@ -35,7 +37,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class SellerMapView extends FragmentActivity implements OnMapReadyCallback {
+public class SellerMapView extends AppCompatActivity implements OnMapReadyCallback {
 
     FirebaseFirestore db=FirebaseFirestore.getInstance();
     private GoogleMap mMap;
@@ -52,6 +54,8 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_seller_map_view);
 
+        getSupportActionBar().setTitle(R.string.chose_business);
+
         //riceve l'intent contenente l'identificatore univoco dell'utente
         Intent intent = getIntent();
         if(intent.hasExtra("UID")){
Index: app/src/main/java/com/example/walktoshop/User/UserStatistics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.User;\r\n\r\nimport android.content.Intent;\r\nimport android.graphics.Color;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.walktoshop.Login_SignUp.LogIn;\r\nimport com.example.walktoshop.Model.User;\r\nimport com.example.walktoshop.Model.Walk;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.github.mikephil.charting.charts.BarChart;\r\nimport com.github.mikephil.charting.components.XAxis;\r\nimport com.github.mikephil.charting.data.BarData;\r\nimport com.github.mikephil.charting.data.BarDataSet;\r\nimport com.github.mikephil.charting.data.BarEntry;\r\nimport com.github.mikephil.charting.formatter.IndexAxisValueFormatter;\r\nimport com.github.mikephil.charting.utils.ColorTemplate;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.sql.Wrapper;\r\nimport java.text.DateFormat;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\n\r\nimport static com.github.mikephil.charting.utils.ColorTemplate.MATERIAL_COLORS;\r\n\r\n/**\r\n * Activity che mostra a schermo le statistiche giornaliere per un massimo di 7 giorni di modo tale che un utente utlizzando l'app ogni giorno\r\n * possiede uno storico settimanale per seguire i suoi progressi e volendo adottare una strategia di allenamento.\r\n * Le statistiche sono fatte importando una libreria che semplicemente crea istogrammi dato un asse x e un asse y.\r\n * L'asse x sarà composto dalle date delle registrazioni avvenute mentre l'asse y dal numero dei passi,dalle kcal bruciate e dai km percorsi\r\n */\r\npublic class UserStatistics extends AppCompatActivity {\r\n    FirebaseFirestore db =FirebaseFirestore.getInstance();//istanziazione al database\r\n    String UID;\r\n    BarChart barChart;\r\n    BarChart kcalBarChart;\r\n    BarChart kmBarChart;\r\n    double latitude;\r\n    double longitude;\r\n    String city;\r\n    BottomNavigationView bottomNavigationView;\r\n    private ArrayList<BarEntry> dailySteps=new ArrayList<>();\r\n    private ArrayList<BarEntry> dailyKm=new ArrayList<>();\r\n    private ArrayList<BarEntry> dailyKcal= new ArrayList<BarEntry>();\r\n    private ArrayList<String> days = new ArrayList<>();\r\n    private TextView daily_steps;\r\n    private TextView daily_meter;\r\n    private TextView daily_kcal;\r\n    private ProgressBar progressBar;\r\n    private TextView report;\r\n    private TextView report1;\r\n    private TextView report2;\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_user_statistics);\r\n        Intent intent = getIntent();\r\n        /*\r\n        Vengono prese le informazioni necessarie per effettuare le query\r\n         */\r\n        if (intent.hasExtra(\"UID\") && intent.hasExtra(\"city\") && intent.hasExtra(\"latitude\") && intent.hasExtra(\"longitude\")) {\r\n            UID = intent.getStringExtra(\"UID\");\r\n            city = intent.getStringExtra(\"city\");\r\n            latitude = intent.getDoubleExtra(\"latitude\", 0.0f);\r\n            longitude = intent.getDoubleExtra(\"longitude\", 0.0f);\r\n        }\r\n\r\n        barChart = findViewById(R.id.barChart);\r\n        kcalBarChart = findViewById(R.id.barChartKcal);\r\n        kmBarChart = findViewById(R.id.barChartKm);\r\n        report = findViewById(R.id.report);\r\n        report1 = findViewById(R.id.report1);\r\n        report2 = findViewById(R.id.report2);\r\n        daily_steps = (TextView) findViewById(R.id.dailySteps);\r\n        daily_kcal = (TextView) findViewById(R.id.kcal);\r\n        daily_meter = (TextView) findViewById(R.id.kilometers);\r\n        progressBar = (ProgressBar) findViewById(R.id.progerssBar);\r\n        progressBar.setProgress(100);\r\n\r\n        bottomNavigationView = (BottomNavigationView) findViewById(R.id.bottom_navigation);\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                switch (item.getItemId()) {\r\n                    case R.id.action_home:\r\n                        goHome();\r\n                        break;\r\n                    case R.id.action_map:\r\n                        goToUserViewMap();\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_action_bar, menu);\r\n        return true;\r\n    }\r\n\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    public void OnItemSelected(MenuItem item) {\r\n        if(item.getItemId() == R.id.action_exit){\r\n            logOut();\r\n        }\r\n    }\r\n\r\n    private void logOut(){\r\n        FirebaseAuth.getInstance().signOut();\r\n        final Intent intent = new Intent(this, LogIn.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(UserStatistics.this)){\r\n            networkController.connectionDialog(UserStatistics.this);\r\n        }\r\n       /*\r\n       Vengono prese le informazioni riguardo data e numero passi della cammianata\r\n        */\r\n        getDailyWalk();\r\n\r\n    }\r\n\r\n    /**\r\n     * Query al db che prende attraverso query innestate altezza e peso utente oltre che le camminate giornaliere per poter calcolare le kcal e i km\r\n     * e settarle\r\n     */\r\n    private void getDailyWalk(){\r\n        db.collection(\"utente\").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document= task.getResult();\r\n                    ArrayList<String> stringedWalks= (ArrayList<String>) document.get(\"walk\");\r\n                    int userHeight= Integer.parseInt(document.getString(\"height\"));\r\n                    int userWeight= Integer.parseInt(document.getString(\"weight\"));\r\n                    if(stringedWalks!=null){\r\n                        int numberOfUserWalks=0;\r\n                        int totalNumberOfUserWalks= stringedWalks.size()-1;\r\n                        for (int i=0;i<7;i++){\r\n                            if(totalNumberOfUserWalks-i>=0){\r\n                                String walkInfo=stringedWalks.get(totalNumberOfUserWalks-i);\r\n                                Walk walk= getWalkInfoFromString(walkInfo);\r\n                                UserStatistics.this.days.add(millisecondsToDate(walk.getDate()));\r\n                                long steps= Long.parseLong((walk.getNumberOfSteps()));\r\n                                float meters= calculateKilometers(userHeight,steps)*1000;//trasformare in metri per il grafico\r\n                                int kcal= calculateKcal(userWeight,steps);\r\n\r\n                                String day = millisecondsToDate(Long.toString(Calendar.getInstance().getTimeInMillis()));\r\n                                if( days.get(i).equals(day)){\r\n                                    daily_steps.setText(\"\"+ steps);\r\n                                    daily_meter.setText((calculateKilometers(userHeight,steps)) + \"Km\");\r\n                                    daily_kcal.setText(\"\"+ calculateKcal(userWeight,steps) + \"Kcal\");\r\n                                }\r\n                                UserStatistics.this.dailySteps.add(new BarEntry(i,steps));\r\n                                UserStatistics.this.dailyKm.add(new BarEntry(i,meters));\r\n                                UserStatistics.this.dailyKcal.add(new BarEntry(i,kcal));\r\n                                numberOfUserWalks++;\r\n                            }\r\n                        }\r\n                        if(stringedWalks != null){\r\n                            //plurals\r\n                            report.setText(getResources().getQuantityString(R.plurals.statisticsStepsr,stringedWalks.size(),stringedWalks.size()));\r\n                            report1.setText(getResources().getQuantityString(R.plurals.statisticsKcal,stringedWalks.size(),stringedWalks.size()));\r\n                            report2.setText(getResources().getQuantityString(R.plurals.statsticsKm,stringedWalks.size(),stringedWalks.size()));\r\n                        }\r\n\r\n                        String[] daysArray = new String[UserStatistics.this.days.size()];\r\n                        daysArray = UserStatistics.this.days.toArray(daysArray);\r\n                        setBarChart(dailyKm,dailyKcal,dailySteps,daysArray);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Metodo che riporta l'utente alla home\r\n     */\r\n    private void goHome() {\r\n        final Intent intent = new Intent(this, UserView.class);;\r\n        intent.putExtra(\"UID\", UID);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Metodo che sposta il controllo alla UserMapView\r\n     */\r\n    private void goToUserViewMap() {\r\n        final Intent intent = new Intent(UserStatistics.this, UserMapView.class);\r\n        intent.putExtra(\"UID\", UID);\r\n        intent.putExtra(\"city\",city);\r\n        intent.putExtra(\"latitude\",latitude);\r\n        intent.putExtra(\"longitude\",longitude);\r\n        startActivity(intent);\r\n    }\r\n\r\n    /**\r\n     * Metodo che dati in input i vari array setta le barre dell'istogramma\r\n     * @param dailyKm\r\n     * @param dailyKcal\r\n     * @param dailySteps\r\n     * @param days\r\n     */\r\n    private void setBarChart(ArrayList<BarEntry> dailyKm, ArrayList<BarEntry> dailyKcal, ArrayList<BarEntry> dailySteps, String[] days){\r\n\r\n        BarDataSet steps = new BarDataSet(dailySteps,getResources().getString(R.string.dailysteps));\r\n        steps.setColors(MATERIAL_COLORS);\r\n        steps.setValueTextColor(Color.BLACK);\r\n        steps.setValueTextSize(12f);\r\n\r\n        BarDataSet kcal = new BarDataSet(dailyKcal,getResources().getString(R.string.dailykilocal));\r\n        kcal.setColors(ColorTemplate.MATERIAL_COLORS);\r\n        kcal.setValueTextColor(Color.BLACK);\r\n        kcal.setValueTextSize(12f);\r\n\r\n        BarDataSet km = new BarDataSet(dailyKm,getResources().getString(R.string.dailymeters));\r\n        km.setColors(ColorTemplate.MATERIAL_COLORS);\r\n        km.setValueTextColor(Color.BLACK);\r\n        km.setValueTextSize(12f);\r\n\r\n        BarData barDataKcal = new BarData(kcal);\r\n        kcalBarChart.setData(barDataKcal);\r\n        kcalBarChart.animate();\r\n        XAxis xAxisKcal = kcalBarChart.getXAxis();\r\n        xAxisKcal.setValueFormatter(new IndexAxisValueFormatter(days));\r\n        xAxisKcal.setPosition(XAxis.XAxisPosition.BOTTOM);\r\n        xAxisKcal.setGranularity(1);\r\n        xAxisKcal.setGranularityEnabled(true);\r\n        kcalBarChart.setDragEnabled(true);\r\n        kcalBarChart.setVisibleXRangeMaximum(4);\r\n        kcalBarChart.invalidate();\r\n\r\n        BarData data = new BarData(steps);\r\n        barChart.setData(data);\r\n        kcalBarChart.animate();\r\n        XAxis xAxis = barChart.getXAxis();\r\n        xAxis.setValueFormatter(new IndexAxisValueFormatter(days));\r\n        xAxis.setPosition(XAxis.XAxisPosition.BOTTOM);\r\n        xAxis.setGranularity(1);\r\n        xAxis.setGranularityEnabled(true);\r\n        barChart.setDragEnabled(true);\r\n        barChart.setVisibleXRangeMaximum(4);\r\n        barChart.invalidate();\r\n\r\n        BarData barDataKm = new BarData(km);\r\n        kmBarChart.setData(barDataKm);\r\n        kmBarChart.animate();\r\n        XAxis xAxisKm = kmBarChart.getXAxis();\r\n        xAxisKm.setValueFormatter(new IndexAxisValueFormatter(days));\r\n        xAxisKm.setPosition(XAxis.XAxisPosition.BOTTOM);\r\n        xAxisKm.setGranularity(1);\r\n        xAxisKm.setGranularityEnabled(true);\r\n        kmBarChart.setDragEnabled(true);\r\n        kmBarChart.setVisibleXRangeMaximum(4);\r\n        kmBarChart.invalidate();\r\n    }\r\n\r\n    /**\r\n     * Metodo che data una string in input viene restituito un oggetto di tipo walk contenente il numero dei passi della camminata e la data di rilevazione\r\n     * @param info\r\n     * @return\r\n     */\r\n    private Walk getWalkInfoFromString(String info){\r\n        String[] todayAndSteps =info.split(\",\");\r\n        Walk walk =new Walk();\r\n        walk.setDate(todayAndSteps[0]);\r\n        walk.setNumberOfSteps(todayAndSteps[1]);\r\n        return walk;\r\n    }\r\n\r\n    /**\r\n     * Metodo per il calcolo dei km data l'altezza utente e il numero dei passi\r\n     * @param height\r\n     * @param steps\r\n     * @return\r\n     */\r\n    private float calculateKilometers(int height,long steps){\r\n        float meters;\r\n        if(height<170){\r\n            meters=Math.round((float)600*steps/1000);\r\n        }else{\r\n            meters=Math.round((float)700*steps/1000);\r\n        }\r\n        float kilometers=meters/1000;\r\n        Log.d(\"km\",kilometers+\"\");\r\n        return kilometers;\r\n    }\r\n\r\n    /**\r\n     * Metodo per calcolare le calorie bruciate in base al peso utente e al numero di passi\r\n     * @param weight\r\n     * @param steps\r\n     * @return\r\n     */\r\n    private int calculateKcal(int weight,long steps){\r\n        int kcal;\r\n        Log.d(\"weight\",weight+\"\");\r\n        kcal= (int) Math.round((float)weight*0.0005*steps);\r\n        Log.d(\"kcal\",kcal+\"\");\r\n        return kcal;\r\n    }\r\n\r\n    /**\r\n     * Metodo che restituisce una data in un determinato formato dati i millisecondi in input\r\n     * @param milliseconds\r\n     * @return\r\n     */\r\n    private String millisecondsToDate(String milliseconds){\r\n        if(milliseconds!=null){\r\n            DateFormat formatter = new SimpleDateFormat(\"dd/MM/yyyy\");\r\n            long longMilliSeconds= Long.parseLong(milliseconds);\r\n            Calendar calendar = Calendar.getInstance();\r\n            calendar.setTimeInMillis(longMilliSeconds);\r\n            return formatter.format(calendar.getTime());\r\n        }\r\n        return \"\";\r\n    }\r\n    //check\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/User/UserStatistics.java	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/java/com/example/walktoshop/User/UserStatistics.java	(date 1612777131061)
@@ -73,6 +73,9 @@
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_user_statistics);
+
+        getSupportActionBar().setTitle(R.string.statistics);
+
         Intent intent = getIntent();
         /*
         Vengono prese le informazioni necessarie per effettuare le query
Index: app/src/main/java/com/example/walktoshop/User/UserMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.User;\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ProgressBar;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.NotificationCompat;\r\n\r\nimport com.example.walktoshop.Login_SignUp.LogIn;\r\nimport com.example.walktoshop.Model.User;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n\r\npublic class UserMapView extends AppCompatActivity implements GoogleMap.OnMarkerClickListener, OnMapReadyCallback {\r\n    GoogleMap mMap;\r\n    ProgressBar progressBar;\r\n    List<LatLng> latLngs = new ArrayList<LatLng>();\r\n    double latitude;\r\n    double longitude;\r\n    private boolean alreadyClicked=false;\r\n    String city;\r\n    String UID;\r\n    boolean isSatellite = false;\r\n    FloatingActionButton userMapFab;\r\n    ArrayList<String> name = new ArrayList<String>();\r\n    private int cache;\r\n    public static final String NOTIFICATION_CHANNEL_ID = \"notification_channel\";\r\n    SupportMapFragment mapFragment;\r\n    FirebaseFirestore db =FirebaseFirestore.getInstance();\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_user_map_view);\r\n\r\n        cache=getSharedPref();//viene preso il numero di sconti precedentemente visibile all'interno della mappa\r\n\r\n\r\n        //il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity\r\n        mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n\r\n        createNotificationChannel();//crea il canale per inviare le notifiche\r\n\r\n        /**\r\n         * L'applicazione, riceve l'intent proveniente dall'activity UserView contenente  i parametri relativi alla città in cui l'utente è stato geolocalizzazto insieme alle\r\n         * coordinate della città, l'UID che identifica univocamente l'utente che utilizza l'applicazione e verifica che questi parametri esistano e siano stati effettivamente\r\n         * ricevuti.\r\n         */\r\n        Intent intent = getIntent();\r\n        if (intent.hasExtra(\"UID\") && intent.hasExtra(\"city\") && intent.hasExtra(\"latitude\") && intent.hasExtra(\"longitude\")) {\r\n            UID = intent.getStringExtra(\"UID\");\r\n            city=intent.getStringExtra(\"city\");\r\n            latitude= intent.getDoubleExtra(\"latitude\",0.0f);\r\n            longitude= intent.getDoubleExtra(\"longitude\",0.0f);\r\n\r\n            /**\r\n             * Viene eseguita una query al db in cui vengono prelevate tutte le attività, aventi come località, la città in cui l'utente è stato geolocalizzato.\r\n             * Successivamente vengono salvati in degli ArrayList l'identificatore degli sconti relativi ad ogni attività nella determinata località, la latitudine e la longitudine ed\r\n             * il nome dell'attività.\r\n             * Poi viene aggiornato il numero di sconti rispetto all'ultimo ingresso nell'activity se esso è maggiore rispetto all'ultima volta, viene inviata una notifica per informare\r\n             * l'utente della presenza dei nuovi sconti ed infine viene chiamato il metodo di callback che viene attivato quando la google map è pronta all'utilizzo.\r\n             */\r\n            db.collection(\"attivita\").whereEqualTo(\"locality\", city).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                    int counter=0;\r\n                    if(task.isSuccessful()){\r\n                        for (QueryDocumentSnapshot document : task.getResult()){\r\n                            ArrayList<String> discounts= (ArrayList<String>) document.get(\"discountUID\");\r\n                            if(discounts == null ){\r\n                                discounts = new ArrayList<String>();\r\n                            }\r\n                            double lat = Double.parseDouble(document.getString(\"latitude\"));\r\n                            double longt = Double.parseDouble(document.getString(\"longitude\"));\r\n                            name.add(document.getString(\"name\"));\r\n                            latLngs.add(new LatLng(lat, longt));\r\n                            counter=counter+discounts.size();\r\n                        }\r\n                        boolean notification=writeSharedPref(counter);\r\n                        if(notification){\r\n                            Log.d(\"notification\",notification+\"\");\r\n                            sendNotification();\r\n                        }\r\n                    }\r\n                    mapFragment.getMapAsync(UserMapView.this);\r\n\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * viene preso un riferimento alla bottom navigation view dell'xml tramite la classe delle risorse R e viene posto un listener che verifica\r\n         * quale item è stato selezionato ed invia un intent per aprire una nuova activity\r\n         */\r\n        BottomNavigationView bottomNavigationView = (BottomNavigationView) findViewById(R.id.bottom_navigation);\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                switch (item.getItemId()) {\r\n                    case R.id.action_home:\r\n                        goHome();\r\n                        break;\r\n                    case R.id.action_statistics:\r\n                        goUserStatistics();\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * viene controllato che il dispositivo sia connesso ad internet altrimenti l'utnete riceve un dialog di avviso\r\n     */\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(UserMapView.this)){\r\n            networkController.connectionDialog(UserMapView.this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Intent esplicito per spostare il controllo dell'applicazione dalla UserMapView all'activity contente le statistiche relative\r\n     * alle attività dell'utente. Sono inviati come parametri dell'intent le informazioni di latitudine, longitudine, città ed identificativo dell'utente\r\n     * perchè in questo modo è possibile dalle statistiche ritornare alla mappa senza dover ripassare dalla home per geolocalizzare nuovamente.\r\n     * Mentre l'UID ci permette semppre di capire a quale utente ci riferiamo.\r\n     */\r\n    private void goUserStatistics() {\r\n        final Intent intent = new Intent(this, UserStatistics.class);\r\n        User user = new User();\r\n        intent.putExtra(\"UID\", UID);\r\n        intent.putExtra(\"city\",city);\r\n        intent.putExtra(\"latitude\",latitude);\r\n        intent.putExtra(\"longitude\",longitude);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    //Intent esplicito per spostare il controllo dell'applicazione dalla UserMapView all'activity della home, viene inviato come parametro l'identifictivo dell'utente\r\n    private void goHome() {\r\n        final Intent intent = new Intent(this, UserView.class);\r\n        intent.putExtra(\"UID\", UID);\r\n        startActivity(intent);\r\n    }\r\n\r\n    //viene fatto l'inflate del menu della ActionBar\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_action_bar, menu);\r\n        return true;\r\n    }\r\n\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    //viene chiamato questo metodo da xml quando l'utente clicca sull'item. ed effettua il log out lanciando un intent che sposta il controllo dell'applicazione sull'activity di login\r\n    public void OnItemSelected(MenuItem item) {\r\n        if(item.getItemId() == R.id.action_exit){\r\n            logOut();\r\n        }\r\n    }\r\n\r\n    //intent esplicito che sposta il controllo dell'applicazione all'activity di login\r\n    private void logOut(){\r\n        FirebaseAuth.getInstance().signOut();\r\n        final Intent intent = new Intent(this, LogIn.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    /**\r\n     * metodo chiamato dal getMapAsync quando la Google map è pronta per l'utilizzo, viene utilizzato un booleano per cambiare la visuale della mappa da satellite a normale e viceversa\r\n     * in corrispondenza del click sul Floating Action Button.\r\n     * Vengono definiti due iteratori uno per la lista contenente i nomi delle attività ed uno per la lista contenente le coordinate dell'attività, questi due iterator vengono fatti scorrere,\r\n     * e ad ogni iterazione viene posizionato un marker sulle coordinate, avente come titolo il nome dell'attività.\r\n     * Successivamente facciamo uno zoom sulla città che abbiamo ottenuto come parametro dell'intent, ossia la città in cui l'utente è stato geolocalizzato, in cui saranno visibili tutti i marker\r\n     * relativi alle attività precedentemente inseriti, infine viene settato un listener sui marker.\r\n     * @param googleMap\r\n     */\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n        userMapFab = (FloatingActionButton) findViewById(R.id.userMapFab);\r\n        userMapFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(isSatellite == false){\r\n                    mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);\r\n                    isSatellite = true;\r\n                } else {\r\n                    mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\r\n                    isSatellite = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        Iterator<LatLng> iteratorLatLng = latLngs.listIterator();\r\n        Iterator<String> iteratorName = name.listIterator();\r\n        while(iteratorLatLng.hasNext() && iteratorName.hasNext()){\r\n            mMap.addMarker(new MarkerOptions().position(iteratorLatLng.next()).title(iteratorName.next()));\r\n        }\r\n        LatLng myPlace = new LatLng(latitude, longitude);\r\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(myPlace, 15));\r\n        mMap.setOnMarkerClickListener(this);\r\n\r\n    }\r\n\r\n    /**\r\n     * Quando clicchiamo su un marker viene chiamato questo metodo, che consente l'apertura del backdrop in modo controllato,\r\n     * non consentendo all'utente di premere più volte sullo stesso marker, in modo da eviatre l'inserimento di uno stesso sconto varie volte.\r\n     * @param marker\r\n     * @return\r\n     */\r\n    @Override\r\n    public boolean onMarkerClick(Marker marker) {\r\n        FragmentUserMapBackDrop fragment=new FragmentUserMapBackDrop();\r\n        LatLng position= marker.getPosition();\r\n        double latitude= position.latitude;\r\n        double longitude= position.longitude;\r\n        if(!alreadyClicked){\r\n            UserMapView.this.alreadyClicked=true;\r\n            Bundle bundle=new Bundle();\r\n            String businessUID=calculateMyBusinessCustomUID(latitude,longitude);\r\n            bundle.putString(\"businessUID\",businessUID);\r\n            bundle.putString(\"UID\",UID);\r\n            fragment.setArguments(bundle);\r\n            getSupportFragmentManager().beginTransaction().addToBackStack(null)\r\n                    .add(R.id.coordinator, fragment,\"BackdropTag\").commit();\r\n        }else{\r\n            getSupportFragmentManager().beginTransaction().\r\n                    remove(getSupportFragmentManager().findFragmentByTag(\"BackdropTag\")).commit();\r\n            UserMapView.this.alreadyClicked=false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    //viene calcolato l'uid dell'attività come somma delle coordinate di latitudine e longitudine\r\n    private String calculateMyBusinessCustomUID(Double latitude,Double longitude){\r\n        if(latitude!=null && longitude!=null){\r\n            String customUID=null;\r\n            customUID= String.valueOf(latitude+longitude);\r\n            customUID =customUID.replaceAll(\"[^0-9]\", \"\");\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    //viene preso dal file il precedente numero di sconti presenti all'interno dell'attività\r\n    private int getSharedPref(){\r\n        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n        if(prefs.contains(\"discountNumber\")){\r\n            int value=prefs.getInt(\"discountNumber\", -1);\r\n            return value;\r\n        }else{\r\n            return -1;\r\n        }\r\n    }\r\n\r\n    //viene aggiornato il file con il nuovo numero di sconti relativo all'attività\r\n    private boolean writeSharedPref(int counter){\r\n        Log.d(\"counter\",counter+\" \"+cache);\r\n        if(cache<0){\r\n            SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            editor.putInt(\"discountNumber\", counter);\r\n            editor.commit();\r\n        }else{\r\n            SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            editor.putInt(\"discountNumber\", counter);\r\n            editor.apply();\r\n            if(counter>cache){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * metodo che notifica l'utente dell'aggiunta di un nuovo sconto da parte di un venditore tramite una notifica personalizzata\r\n     */\r\n    private void sendNotification(){\r\n        NotificationCompat.Builder b = new NotificationCompat.Builder(this);\r\n        b.setAutoCancel(true)\r\n                .setDefaults(android.app.Notification.DEFAULT_ALL)\r\n                .setWhen(System.currentTimeMillis())\r\n                .setSmallIcon(R.drawable.ic_baseline_shop_24)\r\n                .setContentTitle(getResources().getString(R.string.allert_discount_creation))\r\n                .setContentText(getResources().getString(R.string.allert_click_on_marker))\r\n                .setDefaults(android.app.Notification.DEFAULT_LIGHTS| Notification.DEFAULT_SOUND)\r\n                .setContentInfo(\"Info\")\r\n                .setChannelId(NOTIFICATION_CHANNEL_ID);\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n        notificationManager.notify(0,b.build());\r\n    }\r\n    //metodo che apre il canale di connessione per le notifiche\r\n    private void createNotificationChannel(){\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            NotificationManager manager =getSystemService(NotificationManager.class);\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                NotificationChannel notification = new NotificationChannel(NOTIFICATION_CHANNEL_ID,\"WalkToShop\", NotificationManager.IMPORTANCE_DEFAULT);\r\n                manager.createNotificationChannel(notification);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/User/UserMapView.java	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/java/com/example/walktoshop/User/UserMapView.java	(date 1612777131081)
@@ -65,6 +65,8 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_user_map_view);
 
+        getSupportActionBar().setTitle(R.string.map);
+
         cache=getSharedPref();//viene preso il numero di sconti precedentemente visibile all'interno della mappa
 
 
Index: app/src/main/java/com/example/walktoshop/User/CardView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.User;\r\n\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.walktoshop.Model.Discount;\r\nimport com.example.walktoshop.R;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.gson.Gson;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.ListIterator;\r\n\r\n/**\r\n * Activity che  effettuando alcune query mostra a schermo i dettagli della card una volta aperta dell'utente,attraverso un gioco di visibilità\r\n * ciò sarà possibile solo nella userView\r\n */\r\npublic class CardView extends AppCompatActivity {\r\n    private ProgressBar progressBar;\r\n    private Discount d;\r\n    private String UID=null;\r\n    private long totalSteps=0;//passi totali dell'utente\r\n    private TextView goalStepRatio;\r\n    private TextView kcal;\r\n    private TextView kilometers;\r\n    private TextView code;\r\n    private String userWeight=null;\r\n    private String userHeight=null;\r\n    private ImageButton shareButton;//tasto di condivisione\r\n    private String locality=null;\r\n    private String name=null;\r\n    int percentage=0;//percentuale di completamento\r\n    private TextView discountTitle;\r\n    private TextView title;\r\n    String discountCode=null;\r\n    FirebaseFirestore db=FirebaseFirestore.getInstance();\r\n\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_card_view);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setHomeButtonEnabled(true);\r\n        //inizializzazione elementi presenti nel layout activity_cardview.xml\r\n        progressBar = (ProgressBar) findViewById(R.id.progerssBar);\r\n        goalStepRatio= findViewById(R.id.goalStepsRatio);\r\n        shareButton=findViewById(R.id.shareButton);\r\n        kcal=findViewById(R.id.kcal);\r\n        code=findViewById(R.id.code);\r\n        discountTitle = (TextView) findViewById(R.id.discount);\r\n        kilometers = findViewById(R.id.kilometers);\r\n        title=findViewById(R.id.title);\r\n        /*\r\n        Viene ricevuto l'oggetto di tipo discount dal viewAdapter una volta premuta la freccia di modo che alcuni dettagli\r\n        possano essere già settati a schermo nel layout e altri calcolati con altri dati richiesti tramite query al db\r\n         */\r\n        Intent intent=getIntent();\r\n        if(intent.hasExtra(\"discount\") && intent.hasExtra(\"UID\")){\r\n            Gson gson = new Gson();\r\n            String jsonDiscount=intent.getStringExtra(\"discount\");\r\n            Log.d(\"d\",jsonDiscount);\r\n            this.d = gson.fromJson(jsonDiscount, Discount.class);\r\n            this.UID = intent.getStringExtra(\"UID\");\r\n        }\r\n        //il codice sconto è univoco e calcolato concatenando l'id utente e l'id sconto\r\n        discountCode=UID+d.getUID();\r\n        //il codice apparirà solo al 100% per ora al suo posto è mostrata la descrizione dello sconto\r\n        code.setText(d.getDescription());\r\n        //bottone per la condivisione\r\n        shareButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                /*\r\n                    Viene qui chiamato il metodo che consente la condivisione di uno sconto qualora al 100%\r\n                 */\r\n                shareDiscount();\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        //controllo per quanto riguarda la connessione con relativo dialog\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(CardView.this)){\r\n            networkController.connectionDialog(CardView.this);\r\n        }\r\n        /*\r\n        query al db per richiede informazioni da mostrare a schermo riguardo nome attvità e località\r\n         */\r\n        getBusinessInfo(d.getBusinessUID());\r\n        /*\r\n        query di richiesta informazioni personali dell'utente inserite durante il signUp quali altezza e peso per il calcolo\r\n         */\r\n        getUserInfo();\r\n    }\r\n\r\n    /**\r\n     * Metodo che scrive nello sharedpref lo stato dello sconto (completato true)\r\n     * di modo tale che possa poi essere letto nel ViewAdapter per settare a schermo lo stato Completato dello sconto\r\n     * @param discountUID\r\n     */\r\n    private void writeInSharedPref( String discountUID) {\r\n        SharedPreferences sharedPreferences = getSharedPreferences(UID + discountUID, MODE_PRIVATE);\r\n        SharedPreferences.Editor editor = sharedPreferences.edit();\r\n        editor.putBoolean(\"c\", true);\r\n        editor.apply();\r\n    }\r\n\r\n    /**\r\n     * Metodo che dato l'id dell'attività ne prende città e nome da settare nella card\r\n     * @param businessUID\r\n     */\r\n    private void getBusinessInfo(String businessUID){\r\n        db.collection(\"attivita\").document(businessUID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document= task.getResult();\r\n                    CardView.this.locality=document.getString(\"locality\");\r\n                    CardView.this.name=document.getString(\"name\");\r\n                    title.setText(name);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Metodo che consente la chiusura della card senza che l'activity venga aggiunta nello stack delle activity\r\n     * @param item\r\n     * @return\r\n     */\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if(item.getItemId() == android.R.id.home){\r\n            //l'activity viene forzata nel terminare per evitare memory leeks\r\n            finish();\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    /**\r\n     * Metodo che effettua una query al db per ottenere altezza e peso utente e aggiorna la cardView con i dati appena ricevuti\r\n     */\r\n    private void getUserInfo(){\r\n        db.collection(\"utente\").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document= task.getResult();\r\n                    CardView.this.userWeight=document.getString(\"weight\");\r\n                    CardView.this.userHeight=document.getString(\"height\");\r\n                    ArrayList<String> discountSteps = (ArrayList<String>) document.get(\"discountSteps\");\r\n                    Iterator<String> it = discountSteps.iterator();\r\n                    while (it.hasNext()){\r\n                        Discount dis = getDiscountInfoFromString(it.next());\r\n                        if(dis.getUID().equals(CardView.this.d.getUID())){\r\n                            updateUI(dis.getDiscountsQuantity());\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *Metodo richiamato nella query asincrona al db di firebase ,che dati i passi relativi allo sconto di cui si è aperta la card\r\n     * vengono calcolati alcuni dati: effettuate percentuali in base al goal da raggiungere e calcolati i km e le kcal per poi essere mostrate\r\n     * @param newSteps\r\n     */\r\n    private void updateUI(String newSteps){\r\n        long goal= Long.parseLong(d.getDiscountsQuantity());\r\n        CardView.this.totalSteps=Integer.parseInt(newSteps);\r\n        if(totalSteps!=0 && goal!=0){\r\n            percentage=Math.round((float)(totalSteps*100)/goal);\r\n            if(percentage>=100){\r\n                goalStepRatio.setText(goal+\"/\"+goal);\r\n                discountTitle.setText(getResources().getString(R.string.hereDiscount));\r\n                code.setText(discountCode);\r\n\r\n                progressBar.setProgress((int)percentage);//viene settata la percentuale anche nella progress bar per dare un feed di avanzamento\r\n                float km=calculateKilometers(Integer.parseInt(CardView.this.userHeight), goal);\r\n                kilometers.setText(km+\" Km\");\r\n                int calories=calculateKcal(Integer.parseInt(CardView.this.userWeight),goal);\r\n                kcal.setText(calories+\" Kcal\");\r\n                //viene scritto che lo sconto è completato su file\r\n                writeInSharedPref(d.getUID());\r\n                shareButton.setVisibility(View.VISIBLE);\r\n            }else{\r\n                goalStepRatio.setText(totalSteps+\"/\"+goal);\r\n\r\n                progressBar.setProgress((int)percentage);//viene settata la percentuale anche nella progress bar per dare un feed di avanzamento\r\n                float km=calculateKilometers(Integer.parseInt(CardView.this.userHeight), totalSteps);\r\n                kilometers.setText(km+\" Km\");\r\n                int calories=calculateKcal(Integer.parseInt(CardView.this.userWeight),totalSteps);\r\n                kcal.setText(calories+\" Kcal\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * N.B Gli array possono essere solo di tipo string se attributi di un oggetto da scrivere per cui per salvare le info degli sconti si è\r\n     * pensato di inserire per ogni sconto una stringa di tipo UID,numeropassi .\r\n     * Metodo che data una stringa la suddivide in due sottostringhe riguardanti uid sconto e numero passi e restituisce un oggetto riempito di\r\n     * tipo sconto\r\n     * @param info\r\n     * @return\r\n     */\r\n    private Discount getDiscountInfoFromString(String info){\r\n        Discount d = new Discount();\r\n        String[] uidAndSteps =info.split(\",\");\r\n        d.setUID(uidAndSteps[0]);\r\n        d.setDiscountsQuantity(uidAndSteps[1]);\r\n        return d;\r\n    }\r\n\r\n    /**\r\n     * Metodo che dato in input l'altezza dell'utente stima una falcata da moltiplicare poi al numero di passi,restituendo così\r\n     * i kilometri fatti\r\n     * @param height\r\n     * @param steps\r\n     * @return\r\n     */\r\n    private float calculateKilometers(int height,long steps){\r\n        float meters;\r\n        if(height<170){\r\n            meters=Math.round((float)600*steps/1000);\r\n        }else{\r\n            meters=Math.round((float)700*steps/1000);\r\n        }\r\n        float kilometers=meters/1000;\r\n        return kilometers;\r\n    }\r\n\r\n    /**\r\n     * Metodo che dato in input il peso utente e il numero di passi stima le calorie bruciate\r\n     * @param weight\r\n     * @param steps\r\n     * @return\r\n     */\r\n    private int calculateKcal(int weight,long steps){\r\n        int kcal;\r\n        kcal= (int) Math.round((float)weight*0.0005*steps);\r\n        return kcal;\r\n    }\r\n\r\n    /**\r\n     * Metodo che mostra un chooser all'utente delle app di messaggistica presenti sul device in modo da consentire la condivisione\r\n     * dello sconto tramite l'app che egli desidera\r\n     */\r\n    private void shareDiscount(){\r\n        String message=name+\", \"+locality+\"\\n\"+d.getDescription()+\"\\n\"+R.string.share+\"\\n\"+discountCode+\"\\n\";\r\n        Intent sendIntent = new Intent();\r\n        sendIntent.setAction(Intent.ACTION_SEND);\r\n        sendIntent.putExtra(Intent.EXTRA_TEXT, message);\r\n        sendIntent.setType(\"text/plain\");\r\n\r\n        Intent shareIntent = Intent.createChooser(sendIntent, null);\r\n        startActivity(shareIntent);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/User/CardView.java	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/java/com/example/walktoshop/User/CardView.java	(date 1612777131100)
@@ -55,6 +55,7 @@
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_card_view);
+        getSupportActionBar().setTitle(R.string.discount_detail);
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
         getSupportActionBar().setHomeButtonEnabled(true);
         //inizializzazione elementi presenti nel layout activity_cardview.xml
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">WalkToShop</string>\r\n    <string name=\"action_settings\">Impostazioni</string>\r\n    <string name=\"action_exit\">Esci</string>\r\n    <string name=\"search\">search</string>\r\n    <string name=\"content_description_search\">contenuto</string>\r\n    <string name=\"action_home\">home</string>\r\n    <string name=\"action_map\">mappa</string>\r\n    <string name=\"action_statistics\">statistiche</string>\r\n    <string name=\"action_discount\">miei sconti</string>\r\n    <string name=\"action_notification\">notifiche</string>\r\n    <string name=\"action_search\">cerca</string>\r\n    <string name=\"snackbar_message\">Caricamento schermata di inserimento sconto</string>\r\n    <string name=\"snackbar_action\">CLOSE</string>\r\n    <string name=\"user\">Utente</string>\r\n    <string name=\"seller\">Venditore</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"confPassword\">Conferma Password</string>\r\n    <string name=\"register\">Registrati</string>\r\n    <string name=\"emailOrPassWrong\">EMAIL O PASSWORD ERRATI</string>\r\n    <string name=\"emailEmpty\">Inserire email</string>\r\n    <string name=\"passwordEmpty\">Inserire password</string>\r\n    <string name=\"WrongPasswordFormat\">La password deve essere lunga almeno 8 caratteri e inserire almeno: una lettera minuscola,una maiuscola, un carattere speciale[@,#,$,%,&amp;,?,!,_] e un numero</string>\r\n    <string name=\"usernameEmpty\">Inserire username</string>\r\n    <string name=\"heightEmpty\">Inserire altezza</string>\r\n    <string name=\"weightEmpty\">Inserire peso</string>\r\n    <string name=\"wrongHeight\">inserire una altezza compresa tra 100cm e 278cm</string>\r\n    <string name=\"wrongWeight\">inserire un peso che sia compreso tra 40kg e 250kg</string>\r\n    <string name=\"numStepsEmpty\">Inserire numero passi</string>\r\n    <string name=\"InvalidPassword\">Password non valida</string>\r\n    <string name=\"EqualPassword\">La password non corrisponde</string>\r\n    <string name=\"InvalidEmail\">Email non valida</string>\r\n    <string name=\"InvalidUsername\">Password non valida</string>\r\n    <string name=\"emailExists\">Email già esistente</string>\r\n    <string name=\"usernameExists\">Username già esistente</string>\r\n    <string name=\"weight\">Peso</string>\r\n    <string name=\"height\">Altezza</string>\r\n    <string name=\"InvalidWeight\">formato peso errato</string>\r\n    <string name=\"InvalidHeight\">formato altezza errato</string>\r\n    <string name=\"title_activity_seller_maps_view\">Map</string>\r\n    <string name=\"numStepsNotValid\">Numero passi non valido</string>\r\n    <string name=\"notRegistered\">Non sei registrato? Clicca qui!</string>\r\n    <string name=\"alreadyRegistered\">Sei già registrato? Clicca qui!</string>\r\n    <string name=\"RegistrationSuccess\">Registrazione effettuata con succeso!</string>\r\n    <string name=\"InvalidDescription\">Descrizione non valida</string>\r\n    <string name=\"InvalidDateFormat\">Formato data errato</string>\r\n    <string name=\"InvalidDate\">Data errata</string>\r\n    <string name=\"EmptyDate\">Inserire data di scadenza</string>\r\n    <string name=\"NotADay\">Giorno non esistente</string>\r\n    <string name=\"NotAMonth\">Mese non esistente</string>\r\n    <string name=\"NotAYearFree\">Anno errato</string>\r\n    //framgent_manageDiscount\r\n    <string name=\"disocuntsQuantity\">Passi da compiere per lo sconto</string>\r\n    <string name=\"percentage\">Percentuale</string>\r\n    <string name=\"description\">Descrizione</string>\r\n    <string name=\"expiringDate\">Data di scadenza</string>\r\n    <string name=\"add\">Aggiungi</string>\r\n    //dialog\r\n    <string name=\"yes\">Si</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"businessNotFound\">Ci dispiace!Località non trovata.Riprovare, inserendo il nome con il seguente formato \"Nome attività, Città attività\" </string>\r\n    <string name=\"emptyBusiness\">Non possiedi attività! Per registrarne una clicca il bottone in basso a destra!</string>\r\n    <string name=\"DialogFirstTime\">Hai appena attivato il contapassi, questo vale per tutti i tuoi sconti nella Home. Per avere una accurata rilevazione deponi il dispositivo in tasca, fai le tue camminate e alla fine ricordati di disattivarlo per vedere i tuoi risultati!!</string>\r\n    <string name=\"action_stepcounter\">Pedometro</string>\r\n    <string name=\"addBusinessDialog\">Cliccare sul marker in rosso, per confermare l\\'inserimento dell\\'attività</string>\r\n    //networkcontroller\r\n    <string name=\"connect\">Connettiti</string>\r\n    <string name=\"Undo\">Annulla</string>\r\n    <string name=\"internetFail\">Connessione internet troppo debole o assente.</string>\r\n    //manageDiscount\r\n    <string name=\"correctInfo\">Inserimento sconto avvenuto con successo!</string>\r\n    <string name=\"expiringDialog\">Data di scadenza(gg/mm/aaaa)</string>\r\n    <string name=\"notSupportedVersion\">Inserire la data manualmente, poichè la versione del tuo dispositivo non supporta l inserimento automatico tramite calendario</string>\r\n    <string name=\"dateFormat\">Rispettare formato: gg/mm/aaaa</string>\r\n    <string name=\"stepRange\">Inserire un numero passi che sia compreso tra 2000 e 100000</string>\r\n    <string name=\"invalidDate\">Data non valida</string>\r\n    //SellerView\r\n    <string name=\"noActivity\">Nessuna attività registrata</string>\r\n    <string name=\"discount\"> Sconti </string>\r\n    <string name=\"noDiscount\">Nessuno sconto disponibile</string>\r\n    //CardView\r\n    <string name=\"share\">Ecco il codice sconto che ti è stato regalato:</string>\r\n    <string name=\"hereDiscount\">\"Ecco il tuo codice sconto:\"</string>\r\n    //UserMapView\r\n    <string name=\"allert_discount_creation\">Un nuovo sconto è stato aggiunto!</string>\r\n    <string name=\"allert_click_on_marker\">Clicca sui contrassegni rossi nella mappa per scoprirne altri.</string>\r\n    //UserView\r\n    <string name=\"loading\">Rilevamento della posizione in corso</string>\r\n    <string name=\"noDiscountActive\">Nessuno sconto attivato</string>\r\n    <string name=\"addedDiscount\">Sconto aggiunto con successo</string>\r\n    <string name=\"easy\">Facile</string>\r\n    <string name=\"mediumDifficulty\">Media difficoltà</string>\r\n    <string name=\"difficult\">Difficile</string>\r\n    <string name=\"deletedDiscount\">Sconto eliminato</string>\r\n    <string name=\"denyLocalization\">Negando la geolocalizzazione non potrai utilizzare a pieno questa app</string>\r\n    <string name=\"permission\">Permesso di geolocalizzazione</string>\r\n    <string name=\"activediscount\">Sconti Attivi</string>\r\n    <string name=\"noactivediscount\">Nessuno sconto attivato</string>\r\n    <string name=\"completed\">Completato</string>\r\n    //SellerMapView\r\n    <string name=\"allert_business_exist\">Attività già esistente, inseriscine un\\'altra.</string>\r\n    //FragmentMapBackdrop\r\n    <string name=\"discount_list\">Lista sconti disponibili</string>\r\n    <string name=\"no_discount_available\">Nessuno sconto disponibile </string>\r\n    <string name=\"expiringd\">scadenza :</string>\r\n    <string name=\"exp\">Scaduto</string>\r\n    //Statistics\r\n    <string name=\"dailysteps\">Passi giornalieri</string>\r\n    <string name=\"dailykilocal\">Kcal giornaliere</string>\r\n    <string name=\"dailymeters\">Metri giornalieri</string>\r\n\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/res/values/strings.xml	(date 1612777131037)
@@ -110,6 +110,11 @@
     <string name="dailysteps">Passi giornalieri</string>
     <string name="dailykilocal">Kcal giornaliere</string>
     <string name="dailymeters">Metri giornalieri</string>
+    <string name="chose_business">Seleziona Attività</string>
+    <string name="add_discount">Aggiunta Sconto</string>
+    <string name="discount_detail">Dettaglio Sconto</string>
+    <string name="map">Mappa</string>
+    <string name="statistics">Statistiche</string>
 
 
 </resources>
\ No newline at end of file
Index: app/src/main/res/values-en/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <string name=\"app_name\">WalkToShop</string>\r\n    <string name=\"action_settings\">Settings</string>\r\n    <string name=\"action_exit\">Exit</string>\r\n    <string name=\"search\">search</string>\r\n    <string name=\"content_description_search\">content</string>\r\n    <string name=\"action_home\">home</string>\r\n    <string name=\"action_map\">map</string>\r\n    <string name=\"action_statistics\">statistics</string>\r\n    <string name=\"action_discount\">my discounts</string>\r\n    <string name=\"action_notification\">notifications</string>\r\n    <string name=\"action_search\">search</string>\r\n    <string name=\"snackbar_message\">Loading bar for discount code entry</string>\r\n    <string name=\"snackbar_action\">CLOSE</string>\r\n    <string name=\"user\">User</string>\r\n    <string name=\"seller\">Seller</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"confPassword\">Confirm Password</string>\r\n    <string name=\"register\">Sign in</string>\r\n    <string name=\"emailOrPassWrong\">WRONG EMAIL OR PASSWORD</string>\r\n    <string name=\"emailEmpty\">Enter email</string>\r\n    <string name=\"passwordEmpty\">Enter password</string>\r\n    <string name=\"WrongPasswordFormat\">The password must be at least 8 characters long and enter at least: a lowercase letter, an uppercase letter, a special character [@, #, $,%, amp;,?,!, _] And a number</string>\r\n    <string name=\"usernameEmpty\">Enter username</string>\r\n    <string name=\"heightEmpty\">Enter height</string>\r\n    <string name=\"weightEmpty\">Enter weight</string>\r\n    <string name=\"wrongHeight\">enter a height between 100cm and 278cm</string>\r\n    <string name=\"wrongWeight\">enter a weight between 40kg and 250kg</string>\r\n    <string name=\"numStepsEmpty\">Enter number of steps</string>\r\n    <string name=\"InvalidPassword\">Invalid password</string>\r\n    <string name=\"EqualPassword\">Password does not match</string>\r\n    <string name=\"InvalidEmail\">Invalid email</string>\r\n    <string name=\"InvalidUsername\">Invalid password</string>\r\n    <string name=\"emailExists\">Email already exists</string>\r\n    <string name=\"usernameExists\">Username already exists</string>\r\n    <string name=\"weight\">Weight</string>\r\n    <string name=\"height\">Height</string>\r\n    <string name=\"InvalidWeight\">wrong weight format</string>\r\n    <string name=\"InvalidHeight\">wrong height format</string>\r\n    <string name=\"title_activity_seller_maps_view\">Map</string>\r\n    <string name=\"numStepsNotValid\">Invalid number of steps</string>\r\n    <string name=\"notRegistered\">Are you not registered? Click here!</string>\r\n    <string name=\"alreadyRegistered\">Are you already registered? Click here!</string>\r\n    <string name=\"RegistrationSuccess\">Registration successful!</string>\r\n    <string name=\"InvalidDescription\">Invalid description</string>\r\n    <string name=\"InvalidDateFormat\">Incorrect Date Format</string>\r\n    <string name=\"InvalidDate\">Wrong date</string>\r\n    <string name=\"EmptyDate\">Enter expiration date</string>\r\n    <string name=\"NotADay\">Day does not exist</string>\r\n    <string name=\"NotAMonth\">Month does not exist</string>\r\n    <string name=\"NotAYearFree\">Wrong year</string>\r\n    //framgent_manageDiscount\r\n    <string name=\"disocuntsQuantity\">Steps to take for the discount</string>\r\n    <string name=\"percentage\">Percentage</string>\r\n    <string name=\"description\">Description</string>\r\n    <string name=\"expiringDate\">Expiration date</string>\r\n    <string name=\"add\">Add</string>\r\n    //dialog\r\n    <string name=\"yes\">Yes</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"businessNotFound\">Sorry! Location not found. Please try again, by entering the name in the following format \"Business name, Business city\"</string>\r\n    <string name=\"emptyBusiness\">You have no business! To register one click the button at the bottom right!</string>\r\n    <string name=\"DialogFirstTime\">You have just activated the steps counter, this applies to all your discounts in the Home. To have an accurate detection, place the device in your pocket, do your walks and at the end remember to deactivate it to see your results !!</string>\r\n    <string name=\"action_stepcounter\">Steps counter</string>\r\n    <string name=\"addBusinessDialog\">Click on the marker in red to confirm the entry of the activity</string>\r\n    //networkcontroller\r\n    <string name=\"connect\">Connect</string>\r\n    <string name=\"Undo\">Cancel</string>\r\n    <string name=\"internetFail\">Internet connection too weak or absent.</string>\r\n    //manageDiscount\r\n    <string name=\"correctInfo\">Successful discount entry!</string>\r\n    <string name=\"expiringDialog\">Expiration date(dd/mm/yyyy)</string>\r\n    <string name=\"notSupportedVersion\">Enter the date manually, as your device version does not support automatic entry through calendar</string>\r\n    <string name=\"dateFormat\">Respect format: dd/mm/yyyy</string>\r\n    <string name=\"stepRange\">Enter a number of steps between 2000 and 100000</string>\r\n    <string name=\"invalidDate\">Invalid date</string>\r\n    //SellerView\r\n    <string name=\"noActivity\">No business recorded</string>\r\n    <string name=\"discount\"> Discounts </string>\r\n    <string name=\"noDiscount\">No discount available</string>\r\n    //CardView\r\n    <string name=\"share\">Here is the discount code that was given to you:</string>\r\n    <string name=\"hereDiscount\">\"Here is your discount code:\"</string>\r\n    //UserMapView\r\n    <string name=\"allert_discount_creation\">A new discount has been added!</string>\r\n    <string name=\"allert_click_on_marker\">Click on the red marks on the map to discover more.</string>\r\n    //UserView\r\n    <string name=\"loading\">Position detection in progress</string>\r\n    <string name=\"noDiscountActive\">No discount activated</string>\r\n    <string name=\"addedDiscount\">Discount added successfully</string>\r\n    <string name=\"easy\">Easy</string>\r\n    <string name=\"mediumDifficulty\">Medium difficulty</string>\r\n    <string name=\"difficult\">Hard</string>\r\n    <string name=\"deletedDiscount\">Discount deleted</string>\r\n    <string name=\"denyLocalization\">By denying the geolocation you will not be able to fully use this app</string>\r\n    <string name=\"permission\">Geolocation permission</string>\r\n    <string name=\"activediscount\">Active Discounts</string>\r\n    <string name=\"noactivediscount\">No discount activated</string>\r\n    <string name=\"completed\">Completed</string>\r\n    //SellerMapView\r\n    <string name=\"allert_business_exist\">Existing business, enter another one.</string>\r\n    //FragmentMapBackdrop\r\n    <string name=\"discount_list\">Discount list available</string>\r\n    <string name=\"no_discount_available\">No discount available</string>\r\n    <string name=\"expiringd\">expiration :</string>\r\n    <string name=\"exp\">Expired</string>\r\n    //Statistics\r\n    <string name=\"dailysteps\">Daily steps</string>\r\n    <string name=\"dailykilocal\">Daily Kcal</string>\r\n    <string name=\"dailymeters\">Daily meters</string>\r\n    //Plurals\r\n    <plurals name=\"statisticsStepsr\">\r\n        <item quantity=\"zero\">%d measurements relating to daily steps</item>\r\n        <item quantity=\"one\">%d measurement relating to daily steps</item>\r\n        <item quantity=\"two\">%d measurements relating to daily steps</item>\r\n        <item quantity=\"other\">%d measurements relating to daily steps</item>\r\n    </plurals>\r\n    <plurals name=\"statisticsKcal\">\r\n        <item quantity=\"zero\">%d measurements relating to Kcal steps</item>\r\n        <item quantity=\"one\">%d measurement relating to Kcal steps</item>\r\n        <item quantity=\"two\">%d measurements relating to Kcal steps</item>\r\n        <item quantity=\"other\">%d measurements relating to Kcal steps</item>\r\n    </plurals>\r\n    <plurals name=\"statsticsKm\">\r\n        <item  quantity=\"zero\">%d measurements relating to Km steps</item>\r\n        <item  quantity=\"one\">%d measurement relating to Km steps</item>\r\n        <item  quantity=\"two\">%d measurements relating to Km steps</item>\r\n        <item  quantity=\"other\">%d measurements relating to Km steps</item>\r\n    </plurals>\r\n\r\n\r\n\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values-en/strings.xml	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/res/values-en/strings.xml	(date 1612777558756)
@@ -131,6 +131,10 @@
         <item  quantity="other">%d measurements relating to Km steps</item>
     </plurals>
 
-
+    <string name="chose_business">Select Business</string>
+    <string name="add_discount">Discount added</string>
+    <string name="discount_detail">Discount Detail</string>
+    <string name="map">Map</string>
+    <string name="statistics">Statistics</string>
 
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.walktoshop.Model.Discount;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.regex.Pattern;\r\n/*\r\nActivity che consentirà all'utente di effettuare l'operazione di aggiunta di uno sconto inserendo informazioni come una breve descrizione\r\ndello sconto in questione ,il numero di passi compreso in un range (2000-60000) che il venditore dovrà raggiungere e una data di scadenza\r\nsuccessivamente una volta soddisfatti tutti questi requisiti l'utente potrà aggiungere uno sconto relativo alla propria attività\r\n */\r\npublic class ManageDiscount extends AppCompatActivity {\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();//istanziazione db\r\n    private String businessUID=null;//id dell'attività del venditore\r\n    private EditText description;\r\n    private EditText quantity;\r\n    private TextView expiringDate;//data di scadenza che verrà mostrata a schermo per ogni sconto qualora non scaduta\r\n    private Button add;\r\n    private ImageButton addDate;\r\n    private Calendar cal;//istanziazione calendario che servirà dopo per effettuare calcoli sulla scadenza\r\n    private String dateEditText;\r\n    private String[] separetedDate;\r\n    private boolean fromEditText;\r\n    int date;\r\n    long expiringDateInMillis;//data di scadenza in millisecondi\r\n    String stringedDescription;\r\n    String todayInMills;\r\n    String stringedQuantity;\r\n\r\n    //DatePickerDialog.OnDateSetListener listener;\r\n    /*\r\n    Salvataggio dello stato quando un venditore sta riempiendo i campi,ad esempio in caso di rotazione dello schermo...\r\n     */\r\n    @Override\r\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\r\n        super.onSaveInstanceState(outState);\r\n        outState.putString(\"description\", description.getText().toString());\r\n        outState.putString(\"quantity\", quantity.getText().toString());\r\n        outState.putString(\"expiringDate\", expiringDate.getText().toString());\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_managediscount);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setHomeButtonEnabled(true);\r\n        //Viene ricevuto l'uid dell'attività del venditore ,inviato tramite intent da SellerView in modo da poter fare le query sul db\r\n        Intent intent=getIntent();\r\n        if(intent.hasExtra(\"businessUID\")){\r\n            this.businessUID=intent.getStringExtra(\"businessUID\");\r\n        }\r\n        //inizializzazione variabli\r\n        addDate=(ImageButton)findViewById(R.id.addDate);\r\n        expiringDate=(TextView) findViewById(R.id.expiringDate);\r\n        description=(EditText)findViewById(R.id.description);\r\n        quantity=(EditText)findViewById(R.id.disocuntsQuantity);\r\n        add=(Button)findViewById(R.id.add);\r\n        //setting date picker\r\n\r\n        if(savedInstanceState != null){\r\n            description.setText(savedInstanceState.getString(\"description\"));\r\n            quantity.setText(savedInstanceState.getString(\"quantity\"));\r\n            expiringDate.setText(savedInstanceState.getString(\"expiringDate\"));\r\n        }\r\n\r\n        cal=Calendar.getInstance();\r\n        this.todayInMills=getTodayInMills();\r\n        expiringDate.setEnabled(false);\r\n        //Aggiunta data\r\n        addDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                date=cal.get(Calendar.DATE);\r\n                int month=cal.get(Calendar.MONTH);\r\n                int year=cal.get(Calendar.YEAR);\r\n                /*\r\n                Viene usato un datepicker qualora l'sdk version sia superiore a quella richiesta in tal caso vengono effettuati controlli sulla data\r\n                di modo che un venditore non possa mettere una data antecedente a quella di oggi.L'inserimento è dunque controllato anche per utenti\r\n                di versioni di sdk più basse,in questo caso infatti è richiesa l'inserimento della data in modo manuale con i relativi controlli\r\n                 */\r\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\r\n                    expiringDate.setEnabled(false);\r\n                    fromEditText = false;\r\n                    DatePickerDialog datePickerDialog=new DatePickerDialog(ManageDiscount.this, android.R.style.Theme_DeviceDefault_Dialog, new DatePickerDialog.OnDateSetListener() {\r\n                        @Override\r\n                        public void onDateSet(DatePicker datePicker, int year, int month, int date) {\r\n                            month = month + 1;\r\n                            String dateFormat = null;\r\n                            //controlli sulla formattazione della data a schermo\r\n                            if(month < 10 ){\r\n                                if (date < 10){\r\n                                    dateFormat=\"0\"+date+\"/\"+\"0\"+month+\"/\"+year;\r\n                                } else {\r\n                                    dateFormat=date+\"/\"+\"0\"+month+\"/\"+year;\r\n                                }\r\n\r\n                            } else {\r\n                                if (date < 10){\r\n                                    dateFormat = \"0\"+date+\"/\"+month+\"/\"+year;\r\n                                } else{\r\n                                    dateFormat = date+\"/\"+month+\"/\"+year;\r\n                                }\r\n                            }\r\n\r\n                            Date date1 = null;\r\n                            try {\r\n                                //la data in stringa viene poi formattata\r\n                                date1 = new SimpleDateFormat(\"dd/MM/yyyy\").parse(dateFormat);\r\n                            } catch (ParseException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            expiringDate.setText(dateFormat);\r\n                            //la data è poi trasformata in millisecondi per una questione di comodità nei calcoli\r\n                            ManageDiscount.this.expiringDateInMillis =  date1.getTime();\r\n                        }\r\n                    },year,month,date);\r\n                    datePickerDialog.show();\r\n                }else{\r\n                    Toast toast = Toast.makeText(ManageDiscount.this,getResources().getString(R.string.notSupportedVersion),Toast.LENGTH_LONG);\r\n                    toast.setGravity(Gravity.CENTER, 0, 0);\r\n                    toast.show();\r\n                    expiringDate.setEnabled(true);\r\n                    expiringDate.setHint(getResources().getString(R.string.expiringDialog));\r\n                    fromEditText = true;\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        //Aggiunta sconto\r\n        add.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                /*\r\n                Dopo essere stati controllati gli input viene creato un oggetto ,riempito e settato sul db\r\n                 */\r\n                if(checkInfo()){\r\n                    Discount discount= new Discount();\r\n                    String customDiscountUID=calculateMyCustomDiscountUID(businessUID);\r\n                    discount.setUID(customDiscountUID);\r\n                    discount.setBusinessUID(businessUID);\r\n                    discount.setExpiringDate(String.valueOf(expiringDateInMillis));\r\n                    discount.setDescription(stringedDescription);\r\n                    discount.setDiscountsQuantity(stringedQuantity);\r\n                    discount.setStartDiscountDate(todayInMills);\r\n                    addDiscount(customDiscountUID,discount);//query di aggiunta sconto sul db\r\n                    Toast toast = Toast.makeText(getApplicationContext(),getResources().getString((R.string.correctInfo)),Toast.LENGTH_SHORT);\r\n                    toast.show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        //controllo che internet sia sempre presente altrimenti dialog di avvertenza con eventuale refresh dell'activity in caso di riconnessione\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(ManageDiscount.this)){\r\n            networkController.connectionDialog(ManageDiscount.this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if(item.getItemId() == android.R.id.home){\r\n            finish();\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    /**\r\n    Query di aggiunta al db che richiama una query all'attività  per l'inserimento dello sconto anche nella tabella attività\r\n     */\r\n    private void addDiscount(String customDiscountUID, Discount discount){\r\n        db.collection(\"sconti\").document(customDiscountUID).set(discount).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    getBusiness(customDiscountUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n    Query che inserisce lo sconto anche nella tabella attività\r\n     */\r\n    private void getBusiness(String customDiscountUID){\r\n        db.collection(\"attivita\").document(businessUID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document=task.getResult();\r\n                    ArrayList<String> discountUID= (ArrayList<String>) document.get(\"discountUID\");\r\n                    if(discountUID == null){\r\n                        discountUID =new ArrayList<String>();\r\n                    }\r\n                    discountUID.add(customDiscountUID);\r\n                    updateBusiness(discountUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n    Query che sovrascrive i vecchi sconti erogati dall'attività con i precedenti e in piu lo sconto appena aggiunto\r\n     */\r\n    private void updateBusiness(ArrayList<String> discountUID){\r\n        db.collection(\"attivita\").document(businessUID).update(\"discountUID\",discountUID).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    Log.d(\"caricamento\",\"caricamento effettuato correttamente\");\r\n                }else{\r\n                    Log.d(\"caricamento\",\"caricamento non effettuato correttamente\");\r\n                }\r\n            }\r\n        }).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                finish();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n    Metoodo che controlla che la data anche se inserita manualmente in caso di versioni che non supportino il datepicker sia corretta\r\n     */\r\n    private boolean checkDateFormat(){\r\n        String stringDate = dateEditText;\r\n         Pattern DATE_PATTERN = Pattern.compile(\"([0-9]{2})/([0-9]{2})/([0-9]{4})\");\r\n        separetedDate = stringDate.split(\"/\");\r\n        Date dateEditText = null;\r\n\r\n        try {\r\n             dateEditText = new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if(stringDate.isEmpty()){\r\n            this.expiringDate.setError(getResources().getString(R.string.EmptyDate));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(!DATE_PATTERN.matcher(stringDate).matches()){\r\n             Toast toast = Toast.makeText(ManageDiscount.this,getResources().getString(R.string.dateFormat),Toast.LENGTH_LONG);\r\n             toast.setGravity(Gravity.CENTER, 0, 0);\r\n             toast.show();\r\n             this.expiringDate.setError(getResources().getString(R.string.InvalidDateFormat));\r\n             this.expiringDate.requestFocus();\r\n             return false;\r\n         }else if(Integer.parseInt(separetedDate[0]) <= 00 || Integer.parseInt(separetedDate[0]) > 31){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotADay));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(Integer.parseInt(separetedDate[1]) <= 00 || Integer.parseInt(separetedDate[1]) > 12){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotAMonth));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(Integer.parseInt(separetedDate[2]) < Calendar.getInstance().get(Calendar.YEAR)){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotAYearFree));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(dateEditText.getTime() <= Calendar.getInstance().getTimeInMillis()){\r\n            this.expiringDate.setError(getResources().getString(R.string.InvalidDate));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }\r\n\r\n         ManageDiscount.this.expiringDateInMillis =  dateEditText.getTime();\r\n         return true;\r\n    }\r\n\r\n/**\r\nMetodo che controlla sintatticamente che tutte le informazioni fornite dal venditore siano corrette\r\n */\r\n\r\n    private boolean checkInfo(){\r\n        stringedDescription=this.description.getText().toString().trim();\r\n        stringedQuantity=this.quantity.getText().toString().trim();\r\n        if(fromEditText)\r\n        dateEditText = expiringDate.getText().toString().trim();\r\n\r\n        if(stringedDescription.isEmpty() || stringedDescription.length()>50){\r\n            this.description.setError( getResources().getString(R.string.InvalidDescription));\r\n            this.description.requestFocus();\r\n            return false;\r\n        }else if(stringedQuantity.isEmpty()){\r\n            this.quantity.setError( getResources().getString(R.string.numStepsEmpty));\r\n            this.quantity.requestFocus();\r\n            return false;\r\n        }else if(Long.parseLong(stringedQuantity) < 2000 ||  Long.parseLong(stringedQuantity) > 60000){\r\n            // i passi vengono definiti in un certo range di modo che il venditore non possa inserirne troppi o troppo pochi\r\n            Toast toast = Toast.makeText(this,getResources().getString(R.string.stepRange),Toast.LENGTH_LONG);\r\n            toast.setGravity(Gravity.CENTER, 0, 0);\r\n            toast.show();\r\n            this.quantity.setError( getResources().getString(R.string.numStepsNotValid));\r\n            this.quantity.requestFocus();\r\n            return false;\r\n        } else if ((expiringDateInMillis <= cal.getTimeInMillis() || expiringDateInMillis == 0) && !fromEditText){\r\n            //mettere un avviso che indica di inserire correttamente la data\r\n            this.expiringDate.setError(getResources().getString(R.string.invalidDate));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(fromEditText && !checkDateFormat()){\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    /**\r\n    Metodo che calcola un id univoco per poi settare lo sconto sul db l'id\r\n     */\r\n    private String calculateMyCustomDiscountUID(String businessUID){\r\n        String stringedTimeInMills= String.valueOf(System.currentTimeMillis());\r\n        if(businessUID!=null && stringedTimeInMills!=null){\r\n            String customUID=null;\r\n            //l'id è composto dall'id dell'attività concatenato con l'orario in millisecondi corrente\r\n            customUID= businessUID+stringedTimeInMills;\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n    Metodo che restitusce la data di oggi in millisecondi\r\n     */\r\n    private String getTodayInMills(){\r\n        Calendar cal = Calendar.getInstance();\r\n        int year  = cal.get(Calendar.YEAR);\r\n        int month = cal.get(Calendar.MONTH);\r\n        int date  = cal.get(Calendar.DATE);\r\n        cal.clear();\r\n        cal.set(year, month, date);\r\n        long todayMillis2 = cal.getTimeInMillis();\r\n        return String.valueOf(todayMillis2);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java	(revision 0a1d42b8ab28049ad4cf99af18b39ca0bc54fddf)
+++ app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java	(date 1612776893937)
@@ -72,6 +72,7 @@
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_managediscount);
+        getSupportActionBar().setTitle(R.string.add_discount);
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
         getSupportActionBar().setHomeButtonEnabled(true);
         //Viene ricevuto l'uid dell'attività del venditore ,inviato tramite intent da SellerView in modo da poter fare le query sul db

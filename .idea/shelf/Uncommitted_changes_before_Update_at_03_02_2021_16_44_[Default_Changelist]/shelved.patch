Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">WalkToShop</string>\r\n    <string name=\"action_settings\">Impostazioni</string>\r\n    <string name=\"action_exit\">Esci</string>\r\n    <string name=\"search\">search</string>\r\n    <string name=\"content_description_search\">contenuto</string>\r\n    <string name=\"action_home\">home</string>\r\n    <string name=\"action_map\">mappa</string>\r\n    <string name=\"action_statistics\">statistiche</string>\r\n    <string name=\"action_discount\">miei sconti</string>\r\n    <string name=\"action_notification\">notifiche</string>\r\n    <string name=\"action_search\">cerca</string>\r\n    <string name=\"snackbar_message\">Caricamento schermata di inserimento sconto</string>\r\n    <string name=\"snackbar_action\">CLOSE</string>\r\n    <string name=\"user\">Utente</string>\r\n    <string name=\"seller\">Venditore</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"confPassword\">Conferma Password</string>\r\n    <string name=\"register\">Registrati</string>\r\n    <string name=\"emailOrPassWrong\">EMAIL O PASSWORD ERRATI</string>\r\n    <string name=\"emailEmpty\">Inserire email</string>\r\n    <string name=\"passwordEmpty\">Inserire password</string>\r\n    <string name=\"WrongPasswordFormat\">La password deve essere lunga almeno 8 caratteri e inserire almeno: una lettera minuscola,una maiuscola, un carattere speciale[@,#,$,%,&amp;,?,!,_] e un numero</string>\r\n    <string name=\"usernameEmpty\">Inserire username</string>\r\n    <string name=\"heightEmpty\">Inserire altezza</string>\r\n    <string name=\"weightEmpty\">Inserire peso</string>\r\n    <string name=\"wrongHeight\">inserire una altezza compresa tra 100cm e 278cm</string>\r\n    <string name=\"wrongWeight\">inserire un peso che sia compreso tra 40kg e 250kg</string>\r\n    <string name=\"numStepsEmpty\">Inserire numero passi</string>\r\n    <string name=\"InvalidPassword\">Password non valida</string>\r\n    <string name=\"EqualPassword\">La password non corrisponde</string>\r\n    <string name=\"InvalidEmail\">Email non valida</string>\r\n    <string name=\"InvalidUsername\">Password non valida</string>\r\n    <string name=\"emailExists\">Email già esistente</string>\r\n    <string name=\"usernameExists\">Username già esistente</string>\r\n    <string name=\"weight\">Peso</string>\r\n    <string name=\"height\">Altezza</string>\r\n    <string name=\"InvalidWeight\">formato peso errato</string>\r\n    <string name=\"InvalidHeight\">formato altezza errato</string>\r\n    <string name=\"title_activity_seller_maps_view\">Map</string>\r\n    <string name=\"numStepsNotValid\">Numero passi non valido</string>\r\n    <string name=\"notRegistered\">Non sei registrato? Clicca qui!</string>\r\n    <string name=\"alreadyRegistered\">Sei già registrato? Clicca qui!</string>\r\n    <string name=\"RegistrationSuccess\">Registrazione effettuata con succeso!</string>\r\n    <string name=\"InvalidDescription\">Descrizione non valida</string>\r\n    <string name=\"InvalidDateFormat\">Formato data errato</string>\r\n    <string name=\"InvalidDate\">Data errata</string>\r\n    <string name=\"EmptyDate\">Inserire data di scadenza</string>\r\n    <string name=\"NotADay\">Giorno non esistente</string>\r\n    <string name=\"NotAMonth\">Mese non esistente</string>\r\n    <string name=\"NotAYearFree\">Anno errato</string>\r\n    //framgent_manageDiscount\r\n    <string name=\"disocuntsQuantity\">Passi da compiere per lo sconto</string>\r\n    <string name=\"percentage\">Percentuale</string>\r\n    <string name=\"description\">Descrizione</string>\r\n    <string name=\"expiringDate\">Data di scadenza</string>\r\n    <string name=\"add\">Aggiungi</string>\r\n    //dialog\r\n    <string name=\"yes\">Si</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"businessNotFound\">Ci dispiace!Località non trovata.Riprovare</string>\r\n    <string name=\"emptyBusiness\">Non possiedi attività! Per registrarne una clicca il bottone in basso a destra!</string>\r\n    <string name=\"DialogFirstTime\">Hai appena attivato il contapassi, questo vale per tutti i tuoi sconti nella Home. Per avere una accurata rilevazione deponi il dispositivo in tasca, fai le tue camminate e alla fine ricordati di disattivarlo per vedere i tuoi risultati!!</string>\r\n    <string name=\"action_stepcounter\">Pedometro</string>\r\n    <string name=\"addBusinessDialog\">Cliccare sul marker in rosso, per confermare l\\'inserimento dell\\'attività</string>\r\n    //networkcontroller\r\n    <string name=\"connect\">Connettiti</string>\r\n    <string name=\"Undo\">Annulla</string>\r\n    <string name=\"internetFail\">Connessione internet troppo debole o assente.</string>\r\n    //manageDiscount\r\n    <string name=\"correctInfo\">Inserimento sconto avvenuto con successo!</string>\r\n    <string name=\"expiringDialog\">Data di scadenza(gg/mm/aaaa)</string>\r\n    <string name=\"notSupportedVersion\">Inserire la data manualmente, poichè la versione del tuo dispositivo non supporta l inserimento automatico tramite calendario</string>\r\n    <string name=\"dateFormat\">Rispettare formato: gg/mm/aaaa</string>\r\n    <string name=\"stepRange\">Inserire un numero passi che sia compreso tra 2000 e 100000</string>\r\n    <string name=\"invalidDate\">Data non valida</string>\r\n    //SellerView\r\n    <string name=\"noActivity\">Nessuna attività registrata</string>\r\n    <string name=\"discount\"> Sconti </string>\r\n    <string name=\"noDiscount\">Nessuno sconto disponibile</string>\r\n    //CardView\r\n    <string name=\"share\">Ecco il codice sconto che ti è stato regalato:</string>\r\n    <string name=\"hereDiscount\">\"Ecco il tuo codice sconto:\"</string>\r\n    //UserMapView\r\n    <string name=\"allert_discount_creation\">Un nuovo sconto è stato aggiunto!</string>\r\n    <string name=\"allert_click_on_marker\">Clicca sui contrassegni rossi nella mappa per scoprirne altri.</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 24dd008c83efd96d0a1b020ee3eb5b48bfcdd1b8)
+++ app/src/main/res/values/strings.xml	(date 1612363698537)
@@ -86,4 +86,6 @@
     //UserMapView
     <string name="allert_discount_creation">Un nuovo sconto è stato aggiunto!</string>
     <string name="allert_click_on_marker">Clicca sui contrassegni rossi nella mappa per scoprirne altri.</string>
+    //SellerMapView
+    <string name="allert_business_exist">Attività già esistente, inseriscine un\'altra.</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.example.walktoshop.Model.Business;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SellerMapView extends FragmentActivity implements OnMapReadyCallback {\r\n\r\n    FirebaseFirestore db=FirebaseFirestore.getInstance();\r\n    private GoogleMap mMap;\r\n    private String UID = null;\r\n    private static final String API_KEY = \"AIzaSyBrbjgwm3CB6qBhWaa3cMrRV3Ek9XW0cPc\";\r\n    SearchView search;\r\n    String location;\r\n    boolean isExisting = false;\r\n    List<LatLng> latLngs = new ArrayList<LatLng>();\r\n    Business business=new Business();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_seller_map_view);\r\n\r\n        //riceve l'intent contenente l'identificatore univoco dell'utente\r\n        Intent intent = getIntent();\r\n        if(intent.hasExtra(\"UID\")){\r\n            UID=intent.getStringExtra(\"UID\");\r\n            SellerMapView.this.business.setOwnerUID(UID);\r\n        }\r\n\r\n        //il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);\r\n\r\n        search = findViewById(R.id.search_bar);\r\n        //inizializzazione delle places API\r\n        if(!Places.isInitialized()){\r\n            Places.initialize(getApplicationContext(),API_KEY);\r\n        }\r\n        PlacesClient client=Places.createClient(this);\r\n        /**\r\n         * viene settato un listener sulla\r\n         */\r\n        search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String s) {\r\n                location=search.getQuery().toString();\r\n                List<Address> addresses=null;\r\n                if(location!=null || !location.trim().equals(\"\")){\r\n                    Geocoder geocoder=new Geocoder(SellerMapView.this);\r\n                    try{\r\n                        addresses=geocoder.getFromLocationName(location,1);\r\n                        if(addresses.isEmpty()){\r\n                            dialog();\r\n                        }\r\n                        Log.d(\"ADDRESS\", String.valueOf(addresses));\r\n                    }catch(Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    if (addresses!=null && !addresses.isEmpty()){\r\n                        Address addr=addresses.get(0);\r\n                        verifyBusiness(addr);\r\n                        Log.d(\"isExisting\", String.valueOf(isExisting));\r\n\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String s) {\r\n                return false;\r\n            }\r\n        });\r\n        mapFragment.getMapAsync(this);\r\n    }\r\n\r\n    private void verifyBusiness(Address addr) {\r\n\r\n        double latitude = addr.getLatitude();\r\n        double longitude = addr.getLongitude();\r\n        LatLng placeLatLng = new LatLng(latitude,longitude);\r\n        String locality = addr.getLocality();\r\n        Log.d(\"PLACE\", latitude+\"-\"+longitude+\"-\"+locality);\r\n\r\n        db.collection(\"attivita\").whereEqualTo(\"locality\", locality).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    for (QueryDocumentSnapshot document : task.getResult()){\r\n                        double lat = Double.parseDouble(document.getString(\"latitude\"));\r\n                        double longt = Double.parseDouble(document.getString(\"longitude\"));\r\n                        Log.d(\"DB-PLACE\", lat+\"-\"+longt);\r\n                        if(latitude == lat && longitude == longt){\r\n                            isExisting = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(isExisting == true){\r\n                        AlertDialog.Builder builder = new AlertDialog.Builder(SellerMapView.this);\r\n                        // Add the buttons\r\n                        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n\r\n                            }\r\n                        }).setMessage(\"Attività già esistente, inseriscine un'altra.\");\r\n                        // Set other d\r\n                        builder.show();\r\n                        isExisting = false;\r\n                    } else {\r\n                        Log.d(\"place\",addr.getLatitude()+\"--\"+addr.getLongitude()+\"--\"+addr.getLocality());\r\n                        LatLng place=new LatLng(addr.getLatitude(),addr.getLongitude());\r\n                        mMap.addMarker(new MarkerOptions().position(place).title(location));\r\n                        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(place,15));\r\n                        Toast.makeText(SellerMapView.this, R.string.addBusinessDialog, Toast.LENGTH_LONG).show();\r\n\r\n                        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                            @Override\r\n                            public boolean onMarkerClick(Marker marker) {\r\n                                if(SellerMapView.this.location.contains(\",\")){\r\n                                    String[] res = SellerMapView.this.location.split(\"[,]\", 0);\r\n                                    SellerMapView.this.location = res[0];\r\n                                }\r\n                                SellerMapView.this.business.setName(SellerMapView.this.location);\r\n                                SellerMapView.this.business.setLongitude(String.valueOf(addr.getLongitude()));\r\n                                SellerMapView.this.business.setLatitude(String.valueOf(addr.getLatitude()));\r\n                                SellerMapView.this.business.setLocality(addr.getLocality());\r\n                                SellerMapView.this.business.setUID(calculateMyBusinessCustomUID(addr.getLatitude(),addr.getLongitude()));\r\n                                Log.d(\"customuid\",SellerMapView.this.business.getUID());\r\n                                setBusiness(SellerMapView.this.business);\r\n                                return false;\r\n                            }\r\n                        });\r\n                        //inizalizzazione oggetto da scrivere\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        // Add a marker in Sydney and move the camera\r\n        LatLng italy = new LatLng(43.06103001266056, 12.882105287940128);\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(italy));\r\n    }\r\n\r\n    private void setBusiness(Business business){\r\n\r\n        db.collection(\"attivita\").document(business.getUID()).set(this.business).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    getSeller(business.getUID());\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void getSeller(String businessCustomUID){\r\n        db.collection(\"venditore\").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    ArrayList<String> businessUID = (ArrayList<String>) document.get(\"businessUID\");\r\n                    if(businessUID == null)\r\n                    {\r\n                        businessUID = new ArrayList<>();\r\n                    }\r\n                    businessUID.add(businessCustomUID);\r\n                    Log.d(\"op\",businessUID.toString());\r\n                    updateSeller(businessUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void updateSeller(ArrayList<String> businessUID){\r\n        db.collection(\"venditore\").document(UID).update(\"businessUID\",businessUID).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful())\r\n                {\r\n                    Log.d(\"venditore\",\"successo\");\r\n                    finish();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void dialog(){\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        // Add the buttons\r\n        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int id) {\r\n\r\n            }\r\n        }).setMessage(R.string.businessNotFound);\r\n        // Set other d\r\n        builder.show();\r\n    }\r\n    private String calculateMyBusinessCustomUID(Double latitude,Double longitude){\r\n        if(latitude!=null && longitude!=null){\r\n            String customUID=null;\r\n            customUID= String.valueOf(latitude+longitude);\r\n            customUID =customUID.replaceAll(\"[^0-9]\", \"\");\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(revision 24dd008c83efd96d0a1b020ee3eb5b48bfcdd1b8)
+++ app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(date 1612366755530)
@@ -69,7 +69,9 @@
         }
         PlacesClient client=Places.createClient(this);
         /**
-         * viene settato un listener sulla
+         * viene settato un listener sulla SearchView che prende il nome della attività digitata dall'utente e utilizzando l'oggetto geodecoder
+         * ottiene la latitudine e la longitudine dell'attività altrimenti se la stringa digitata è vuota, non esiste oppure è stata digitata un attività già esistente
+         * verra mostrato un dialog che avvisa l'utente dell'errore commesso.
          */
         search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
@@ -83,15 +85,12 @@
                         if(addresses.isEmpty()){
                             dialog();
                         }
-                        Log.d("ADDRESS", String.valueOf(addresses));
                     }catch(Exception e){
                         e.printStackTrace();
                     }
                     if (addresses!=null && !addresses.isEmpty()){
                         Address addr=addresses.get(0);
                         verifyBusiness(addr);
-                        Log.d("isExisting", String.valueOf(isExisting));
-
                     }
                 }
                 return false;
@@ -105,13 +104,20 @@
         mapFragment.getMapAsync(this);
     }
 
+    /**
+     * Usa l'oggetto di tipo Address contenente latitudine, longitudine e locality di un determinato luogo per fare una query al db
+     * prendendo tutte le attività aventi come locality quella definita all'interno dell'oggetto di tipo Addresses, successivamente controlla
+     * le latitudini e longitudini di queste attività estratte dal db con quella dell'oggetto di tipo  Address e verifica se l'attività digitata dall'utente
+     * è già esistente o meno, nel caso in cui esista mostra all'utente un dialog che indica l'errore commesso, se invece è la prima volta che viene inserita, la mappa
+     * esegue uno  zoom sul marker corrispondente a latitudine e longitudine contenute nell'oggetto di tipo Address.
+     * @param addr
+     */
     private void verifyBusiness(Address addr) {
 
         double latitude = addr.getLatitude();
         double longitude = addr.getLongitude();
         LatLng placeLatLng = new LatLng(latitude,longitude);
         String locality = addr.getLocality();
-        Log.d("PLACE", latitude+"-"+longitude+"-"+locality);
 
         db.collection("attivita").whereEqualTo("locality", locality).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {
             @Override
@@ -133,8 +139,7 @@
                             public void onClick(DialogInterface dialog, int id) {
 
                             }
-                        }).setMessage("Attività già esistente, inseriscine un'altra.");
-                        // Set other d
+                        }).setMessage(R.string.allert_business_exist);
                         builder.show();
                         isExisting = false;
                     } else {
@@ -144,6 +149,11 @@
                         mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(place,15));
                         Toast.makeText(SellerMapView.this, R.string.addBusinessDialog, Toast.LENGTH_LONG).show();
 
+                        /**
+                         *   quando l'utente clicca sul marker viene caricato l'oggetto di tipo business con le informazioni relative a latitudine
+                         *   longitudine, localita e business UID creato sommando la latitudine e la longitudine.
+                         */
+
                         mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
                             @Override
                             public boolean onMarkerClick(Marker marker) {
@@ -156,12 +166,10 @@
                                 SellerMapView.this.business.setLatitude(String.valueOf(addr.getLatitude()));
                                 SellerMapView.this.business.setLocality(addr.getLocality());
                                 SellerMapView.this.business.setUID(calculateMyBusinessCustomUID(addr.getLatitude(),addr.getLongitude()));
-                                Log.d("customuid",SellerMapView.this.business.getUID());
                                 setBusiness(SellerMapView.this.business);
                                 return false;
                             }
                         });
-                        //inizalizzazione oggetto da scrivere
                     }
 
                 }
@@ -169,15 +177,16 @@
         });
     }
 
+    //in questo metodo viene settata la camera sull'italia
     @Override
     public void onMapReady(GoogleMap googleMap) {
         mMap = googleMap;
 
-        // Add a marker in Sydney and move the camera
         LatLng italy = new LatLng(43.06103001266056, 12.882105287940128);
         mMap.moveCamera(CameraUpdateFactory.newLatLng(italy));
     }
 
+    //il metodo riceve l'oggetto business in input ed esegue una query che setta l' attività corrispondente all' identificatore univoco del business
     private void setBusiness(Business business){
 
         db.collection("attivita").document(business.getUID()).set(this.business).addOnCompleteListener(new OnCompleteListener<Void>() {
@@ -189,6 +198,11 @@
             }
         });
     }
+
+    /**
+     * metodo che aggiunge l'attività del venditore sul db con un custom UID
+     * @param businessCustomUID
+     */
     private void getSeller(String businessCustomUID){
         db.collection("venditore").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
             @Override
@@ -207,18 +221,23 @@
             }
         });
     }
+
+    /**
+     * L'array di attività viene sovrascritto sul db con un nuovo array contenente l'attività agguiunta
+     * @param businessUID
+     */
     private void updateSeller(ArrayList<String> businessUID){
         db.collection("venditore").document(UID).update("businessUID",businessUID).addOnCompleteListener(new OnCompleteListener<Void>() {
             @Override
             public void onComplete(@NonNull Task<Void> task) {
                 if(task.isSuccessful())
                 {
-                    Log.d("venditore","successo");
                     finish();
                 }
             }
         });
     }
+    //dialog mostrato quando la stringa digitata è vuota oppure non è stata trovata
     private void dialog(){
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         // Add the buttons
@@ -230,6 +249,7 @@
         // Set other d
         builder.show();
     }
+    //viene calcolato l'UID del business appena digitato dall'utente come somma delle sue coordinate di latitudine e longitudine
     private String calculateMyBusinessCustomUID(Double latitude,Double longitude){
         if(latitude!=null && longitude!=null){
             String customUID=null;

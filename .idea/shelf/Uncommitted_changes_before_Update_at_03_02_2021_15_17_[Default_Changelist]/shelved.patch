Index: app/src/main/java/com/example/walktoshop/User/UserMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.User;\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.walktoshop.Login_SignUp.LogIn;\r\nimport com.example.walktoshop.Model.User;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\nimport java.util.List;\r\n\r\n\r\npublic class UserMapView extends AppCompatActivity implements GoogleMap.OnMarkerClickListener, OnMapReadyCallback {\r\n    GoogleMap mMap;\r\n    ProgressBar progressBar;\r\n    List<LatLng> latLngs = new ArrayList<LatLng>();\r\n    double latitude;\r\n    double longitude;\r\n    private boolean alreadyClicked=false;\r\n    String city;\r\n    String UID;\r\n    boolean isSatellite = false;\r\n    FloatingActionButton userMapFab;\r\n    ArrayList<String> name = new ArrayList<String>();\r\n    private int cache;\r\n    public static final String NOTIFICATION_CHANNEL_ID = \"notification_channel\";\r\n    SupportMapFragment mapFragment;\r\n    FirebaseFirestore db =FirebaseFirestore.getInstance();\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_user_map_view);\r\n\r\n        cache=getSharedPref();//viene preso il numero di socnti precedentemente visibile all'interno della mappa\r\n\r\n        /**\r\n         * il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity\r\n         */\r\n        mapFragment = (SupportMapFragment) getSupportFragmentManager()\r\n                .findFragmentById(R.id.map);\r\n\r\n        createNotificationChannel();//crea il canale per inviare le notifiche\r\n\r\n        /**\r\n         * L'applicazione, riceve l'intent proveniente dall'activity UserView contenente  i parametri relativi alla città in cui l'utente è stato geolocalizzazto insieme alle\r\n         * coordinate della città, l'UID che identifica univocamente l'utente che utilizza l'applicazione e verifica che questi parametri esistano e siano stati effettivamente\r\n         * ricevuti.\r\n         */\r\n        Intent intent = getIntent();\r\n        if (intent.hasExtra(\"UID\") && intent.hasExtra(\"city\") && intent.hasExtra(\"latitude\") && intent.hasExtra(\"longitude\")) {\r\n            UID = intent.getStringExtra(\"UID\");\r\n            city=intent.getStringExtra(\"city\");\r\n            latitude= intent.getDoubleExtra(\"latitude\",0.0f);\r\n            longitude= intent.getDoubleExtra(\"longitude\",0.0f);\r\n\r\n            /**\r\n             * Viene eseguita una query al db in cui vengono prelevate tutte le attività, aventi come località, la città in cui l'utente è stato geolocalizzato.\r\n             * Successivamente vengono salvati in degli ArrayList l'identificatore degli sconti relativi ad ogni attività nella determinata località, la latitudine e la longitudine ed\r\n             * il nome dell'attività.\r\n             * Poi viene aggiornato il numero di sconti rispetto all'ultimo ingresso nell'activity se esso è maggiore rispetto all'ultima volta, viene inviata una notifica per informare\r\n             * l'utente della presenza dei nuovi sconti ed infine viene chiamato il metodo di callback che viene attivato quando la google map è pronta all'utilizzo.\r\n             */\r\n            db.collection(\"attivita\").whereEqualTo(\"locality\", city).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                    int counter=0;\r\n                    if(task.isSuccessful()){\r\n                        for (QueryDocumentSnapshot document : task.getResult()){\r\n                            ArrayList<String> discounts= (ArrayList<String>) document.get(\"discountUID\");\r\n                            if(discounts == null ){\r\n                                discounts = new ArrayList<String>();\r\n                            }\r\n                            double lat = Double.parseDouble(document.getString(\"latitude\"));\r\n                            double longt = Double.parseDouble(document.getString(\"longitude\"));\r\n                            name.add(document.getString(\"name\"));\r\n                            latLngs.add(new LatLng(lat, longt));\r\n                            counter=counter+discounts.size();\r\n                        }\r\n                        boolean notification=writeSharedPref(counter);\r\n                        if(notification){\r\n                            Log.d(\"notification\",notification+\"\");\r\n                            sendNotification();\r\n                        }\r\n                    }\r\n                    mapFragment.getMapAsync(UserMapView.this);\r\n\r\n                }\r\n            });\r\n        }\r\n        /**\r\n         * viene preso un riferimento alla bottom navigation view dell'xml tramite la classe delle risorse R e viene posto un listener che verifica\r\n         * quale item è stato selezionato ed invia un intent per aprire una nuova activity\r\n         */\r\n        BottomNavigationView bottomNavigationView = (BottomNavigationView) findViewById(R.id.bottom_navigation);\r\n        bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener() {\r\n            @Override\r\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\r\n                switch (item.getItemId()) {\r\n                    case R.id.action_home:\r\n                        goHome();\r\n                        break;\r\n                    case R.id.action_statistics:\r\n                        goUserStatistics();\r\n                        break;\r\n                }\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * viene controllato che il dispositivo sia connesso ad internet altrimenti l'utnete riceve un dialog di avviso\r\n     */\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(UserMapView.this)){\r\n            networkController.connectionDialog(UserMapView.this);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Intent esplicito per spostare il controllo dell'applicazione dalla UserMapView all'activity contente le statistiche relative\r\n     * alle attività dell'utente. Sono inviati come parametri dell'intent le informazioni di latitudine, longitudine, città ed identificativo dell'utente\r\n     * perchè in questo modo è possibile dalle statistiche ritornare alla mappa senza dover ripassare dalla home per geolocalizzare nuovamente.\r\n     * Mentre l'UID ci permette semppre di capire a quale utente ci riferiamo.\r\n     */\r\n    private void goUserStatistics() {\r\n        final Intent intent = new Intent(this, UserStatistics.class);\r\n        User user = new User();\r\n        intent.putExtra(\"UID\", UID);\r\n        intent.putExtra(\"city\",city);\r\n        intent.putExtra(\"latitude\",latitude);\r\n        intent.putExtra(\"longitude\",longitude);\r\n        startActivity(intent);\r\n    }\r\n\r\n\r\n    //Intent esplicito per spostare il controllo dell'applicazione dalla UserMapView all'activity della home, viene inviato come parametro l'identifictivo dell'utente\r\n    private void goHome() {\r\n        final Intent intent = new Intent(this, UserView.class);\r\n        intent.putExtra(\"UID\", UID);\r\n        startActivity(intent);\r\n    }\r\n\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_action_bar, menu);\r\n        return true;\r\n    }\r\n\r\n    public boolean onOptionsItemSelected(MenuItem item) {\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    public void OnItemSelected(MenuItem item) {\r\n        if(item.getItemId() == R.id.action_exit){\r\n            logOut();\r\n        }\r\n    }\r\n\r\n    private void logOut(){\r\n        FirebaseAuth.getInstance().signOut();\r\n        final Intent intent = new Intent(this, LogIn.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n        userMapFab = (FloatingActionButton) findViewById(R.id.userMapFab);\r\n        userMapFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if(isSatellite == false){\r\n                    mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);\r\n                    isSatellite = true;\r\n                } else {\r\n                    mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);\r\n                    isSatellite = false;\r\n                }\r\n            }\r\n        });\r\n\r\n        Iterator<LatLng> iteratorLatLng = latLngs.listIterator();\r\n        Iterator<String> iteratorName = name.listIterator();\r\n        while(iteratorLatLng.hasNext() && iteratorName.hasNext()){\r\n            mMap.addMarker(new MarkerOptions().position(iteratorLatLng.next()).title(iteratorName.next()));\r\n        }\r\n        LatLng myPlace = new LatLng(latitude, longitude);\r\n        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(myPlace, 15));\r\n        mMap.setOnMarkerClickListener(this);\r\n\r\n    }\r\n\r\n    @Override\r\n    public boolean onMarkerClick(Marker marker) {\r\n        FragmentUserMapBackDrop fragment=new FragmentUserMapBackDrop();\r\n        LatLng position= marker.getPosition();\r\n        double latitude= position.latitude;\r\n        double longitude= position.longitude;\r\n        if(!alreadyClicked){\r\n            UserMapView.this.alreadyClicked=true;\r\n            Bundle bundle=new Bundle();\r\n            String businessUID=calculateMyBusinessCustomUID(latitude,longitude);\r\n            bundle.putString(\"businessUID\",businessUID);\r\n            bundle.putString(\"UID\",UID);\r\n            fragment.setArguments(bundle);\r\n            getSupportFragmentManager().beginTransaction().addToBackStack(null)\r\n                    .add(R.id.coordinator, fragment,\"BackdropTag\").commit();\r\n        }else{\r\n            getSupportFragmentManager().beginTransaction().\r\n                    remove(getSupportFragmentManager().findFragmentByTag(\"BackdropTag\")).commit();\r\n            UserMapView.this.alreadyClicked=false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n    private String calculateMyBusinessCustomUID(Double latitude,Double longitude){\r\n        if(latitude!=null && longitude!=null){\r\n            String customUID=null;\r\n            customUID= String.valueOf(latitude+longitude);\r\n            customUID =customUID.replaceAll(\"[^0-9]\", \"\");\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private int getSharedPref(){\r\n        SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n        if(prefs.contains(\"discountNumber\")){\r\n            int value=prefs.getInt(\"discountNumber\", -1);\r\n            return value;\r\n        }else{\r\n            return -1;\r\n        }\r\n    }\r\n    private boolean writeSharedPref(int counter){\r\n        Log.d(\"counter\",counter+\" \"+cache);\r\n        if(cache<0){\r\n            SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            editor.putInt(\"discountNumber\", counter);\r\n            editor.commit();\r\n        }else{\r\n            SharedPreferences prefs = getApplicationContext().getSharedPreferences(\"details\", MODE_PRIVATE);\r\n            SharedPreferences.Editor editor = prefs.edit();\r\n            editor.putInt(\"discountNumber\", counter);\r\n            editor.apply();\r\n            if(counter>cache){\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    private void sendNotification(){\r\n        NotificationCompat.Builder b = new NotificationCompat.Builder(this);\r\n        b.setAutoCancel(true)\r\n                .setDefaults(android.app.Notification.DEFAULT_ALL)\r\n                .setWhen(System.currentTimeMillis())\r\n                .setSmallIcon(R.drawable.ic_baseline_shop_24)\r\n                .setContentTitle(\"Un nuovo sconto è stato aggiunto!\")\r\n                .setContentText(\"Clicca sui contrassegni rossi nella mappa per scoprirne altri.\")\r\n                .setDefaults(android.app.Notification.DEFAULT_LIGHTS| Notification.DEFAULT_SOUND)\r\n                .setContentInfo(\"Info\")\r\n                .setChannelId(NOTIFICATION_CHANNEL_ID);\r\n        NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n        notificationManager.notify(0,b.build());\r\n    }\r\n    private void createNotificationChannel(){\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\r\n            NotificationManager manager =getSystemService(NotificationManager.class);\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                NotificationChannel notification = new NotificationChannel(NOTIFICATION_CHANNEL_ID,\"WalkToShop\", NotificationManager.IMPORTANCE_DEFAULT);\r\n                manager.createNotificationChannel(notification);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/User/UserMapView.java	(revision 8bbc455797d13a034c6d8613569de7058633ed25)
+++ app/src/main/java/com/example/walktoshop/User/UserMapView.java	(date 1612361747231)
@@ -67,11 +67,10 @@
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_user_map_view);
 
-        cache=getSharedPref();//viene preso il numero di socnti precedentemente visibile all'interno della mappa
+        cache=getSharedPref();//viene preso il numero di sconti precedentemente visibile all'interno della mappa
 
-        /**
-         * il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity
-         */
+
+        //il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity
         mapFragment = (SupportMapFragment) getSupportFragmentManager()
                 .findFragmentById(R.id.map);
 
@@ -180,6 +179,7 @@
         startActivity(intent);
     }
 
+    //viene fatto l'inflate del menu della ActionBar
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.menu_action_bar, menu);
         return true;
@@ -189,12 +189,14 @@
         return super.onOptionsItemSelected(item);
     }
 
+    //viene chiamato questo metodo da xml quando l'utente clicca sull'item. ed effettua il log out lanciando un intent che sposta il controllo dell'applicazione sull'activity di login
     public void OnItemSelected(MenuItem item) {
         if(item.getItemId() == R.id.action_exit){
             logOut();
         }
     }
 
+    //intent esplicito che sposta il controllo dell'applicazione all'activity di login
     private void logOut(){
         FirebaseAuth.getInstance().signOut();
         final Intent intent = new Intent(this, LogIn.class);
@@ -202,6 +204,15 @@
         finish();
     }
 
+    /**
+     * metodo chiamato dal getMapAsync quando la Google map è pronta per l'utilizzo, viene utilizzato un booleano per cambiare la visuale della mappa da satellite a normale e viceversa
+     * in corrispondenza del click sul Floating Action Button.
+     * Vengono definiti due iteratori uno per la lista contenente i nomi delle attività ed uno per la lista contenente le coordinate dell'attività, questi due iterator vengono fatti scorrere,
+     * e ad ogni iterazione viene posizionato un marker sulle coordinate, avente come titolo il nome dell'attività.
+     * Successivamente facciamo uno zoom sulla città che abbiamo ottenuto come parametro dell'intent, ossia la città in cui l'utente è stato geolocalizzato, in cui saranno visibili tutti i marker
+     * relativi alle attività precedentemente inseriti, infine viene settato un listener sui marker.
+     * @param googleMap
+     */
     @Override
     public void onMapReady(GoogleMap googleMap) {
         mMap = googleMap;
@@ -230,6 +241,12 @@
 
     }
 
+    /**
+     * Quando clicchiamo su un marker viene chiamato questo metodo, che consente l'apertura del backdrop in modo controllato,
+     * non consentendo all'utente di premere più volte sullo stesso marker, in modo da eviatre l'inserimento di uno stesso sconto varie volte.
+     * @param marker
+     * @return
+     */
     @Override
     public boolean onMarkerClick(Marker marker) {
         FragmentUserMapBackDrop fragment=new FragmentUserMapBackDrop();
@@ -253,6 +270,7 @@
 
         return false;
     }
+    //viene calcolato l'uid dell'attività come somma delle coordinate di latitudine e longitudine
     private String calculateMyBusinessCustomUID(Double latitude,Double longitude){
         if(latitude!=null && longitude!=null){
             String customUID=null;
@@ -264,6 +282,7 @@
         }
     }
 
+    //viene preso dal file il precedente numero di sconti presenti all'interno dell'attività
     private int getSharedPref(){
         SharedPreferences prefs = getApplicationContext().getSharedPreferences("details", MODE_PRIVATE);
         if(prefs.contains("discountNumber")){
@@ -273,6 +292,8 @@
             return -1;
         }
     }
+
+    //viene aggiornato il file con il nuovo numero di sconti relativo all'attività
     private boolean writeSharedPref(int counter){
         Log.d("counter",counter+" "+cache);
         if(cache<0){
@@ -291,20 +312,25 @@
         }
         return false;
     }
+
+    /**
+     * metodo che notifica l'utente dell'aggiunta di un nuovo sconto da parte di un venditore tramite una notifica personalizzata
+     */
     private void sendNotification(){
         NotificationCompat.Builder b = new NotificationCompat.Builder(this);
         b.setAutoCancel(true)
                 .setDefaults(android.app.Notification.DEFAULT_ALL)
                 .setWhen(System.currentTimeMillis())
                 .setSmallIcon(R.drawable.ic_baseline_shop_24)
-                .setContentTitle("Un nuovo sconto è stato aggiunto!")
-                .setContentText("Clicca sui contrassegni rossi nella mappa per scoprirne altri.")
+                .setContentTitle(getResources().getString(R.string.allert_discount_creation))
+                .setContentText(getResources().getString(R.string.allert_click_on_marker))
                 .setDefaults(android.app.Notification.DEFAULT_LIGHTS| Notification.DEFAULT_SOUND)
                 .setContentInfo("Info")
                 .setChannelId(NOTIFICATION_CHANNEL_ID);
         NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
         notificationManager.notify(0,b.build());
     }
+    //metodo che apre il canale di connessione per le notifiche
     private void createNotificationChannel(){
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             NotificationManager manager =getSystemService(NotificationManager.class);
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">WalkToShop</string>\r\n    <string name=\"action_settings\">Impostazioni</string>\r\n    <string name=\"action_exit\">Esci</string>\r\n    <string name=\"search\">search</string>\r\n    <string name=\"content_description_search\">contenuto</string>\r\n    <string name=\"action_home\">home</string>\r\n    <string name=\"action_map\">mappa</string>\r\n    <string name=\"action_statistics\">statistiche</string>\r\n    <string name=\"action_discount\">miei sconti</string>\r\n    <string name=\"action_notification\">notifiche</string>\r\n    <string name=\"action_search\">cerca</string>\r\n    <string name=\"snackbar_message\">Caricamento schermata di inserimento sconto</string>\r\n    <string name=\"snackbar_action\">CLOSE</string>\r\n    <string name=\"user\">Utente</string>\r\n    <string name=\"seller\">Venditore</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"confPassword\">Conferma Password</string>\r\n    <string name=\"register\">Registrati</string>\r\n    <string name=\"emailOrPassWrong\">EMAIL O PASSWORD ERRATI</string>\r\n    <string name=\"emailEmpty\">Inserire email</string>\r\n    <string name=\"passwordEmpty\">Inserire password</string>\r\n    <string name=\"WrongPasswordFormat\">La password deve essere lunga almeno 8 caratteri e inserire almeno: una lettera minuscola,una maiuscola, un carattere speciale[@,#,$,%,&amp;,?,!,_] e un numero</string>\r\n    <string name=\"usernameEmpty\">Inserire username</string>\r\n    <string name=\"heightEmpty\">Inserire altezza</string>\r\n    <string name=\"weightEmpty\">Inserire peso</string>\r\n    <string name=\"wrongHeight\">inserire una altezza compresa tra 100cm e 278cm</string>\r\n    <string name=\"wrongWeight\">inserire un peso che sia compreso tra 40kg e 250kg</string>\r\n    <string name=\"numStepsEmpty\">Inserire numero passi</string>\r\n    <string name=\"InvalidPassword\">Password non valida</string>\r\n    <string name=\"EqualPassword\">La password non corrisponde</string>\r\n    <string name=\"InvalidEmail\">Email non valida</string>\r\n    <string name=\"InvalidUsername\">Password non valida</string>\r\n    <string name=\"emailExists\">Email già esistente</string>\r\n    <string name=\"usernameExists\">Username già esistente</string>\r\n    <string name=\"weight\">Peso</string>\r\n    <string name=\"height\">Altezza</string>\r\n    <string name=\"InvalidWeight\">formato peso errato</string>\r\n    <string name=\"InvalidHeight\">formato altezza errato</string>\r\n    <string name=\"title_activity_seller_maps_view\">Map</string>\r\n    <string name=\"numStepsNotValid\">Numero passi non valido</string>\r\n    <string name=\"notRegistered\">Non sei registrato? Clicca qui!</string>\r\n    <string name=\"alreadyRegistered\">Sei già registrato? Clicca qui!</string>\r\n    <string name=\"RegistrationSuccess\">Registrazione effettuata con succeso!</string>\r\n    <string name=\"InvalidDescription\">Descrizione non valida</string>\r\n    <string name=\"InvalidDateFormat\">Formato data errato</string>\r\n    <string name=\"InvalidDate\">Data errata</string>\r\n    <string name=\"EmptyDate\">Inserire data di scadenza</string>\r\n    <string name=\"NotADay\">Giorno non esistente</string>\r\n    <string name=\"NotAMonth\">Mese non esistente</string>\r\n    <string name=\"NotAYearFree\">Anno errato</string>\r\n    //framgent_manageDiscount\r\n    <string name=\"disocuntsQuantity\">Passi da compiere per lo sconto</string>\r\n    <string name=\"percentage\">Percentuale</string>\r\n    <string name=\"description\">Descrizione</string>\r\n    <string name=\"expiringDate\">Data di scadenza</string>\r\n    <string name=\"add\">Aggiungi</string>\r\n    //dialog\r\n    <string name=\"yes\">Si</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"businessNotFound\">Ci dispiace!Località non trovata.Riprovare</string>\r\n    <string name=\"emptyBusiness\">Non possiedi attività! Per registrarne una clicca il bottone in basso a destra!</string>\r\n    <string name=\"DialogFirstTime\">Hai appena attivato il contapassi, questo vale per tutti i tuoi sconti nella Home. Per avere una accurata rilevazione deponi il dispositivo in tasca, fai le tue camminate e alla fine ricordati di disattivarlo per vedere i tuoi risultati!!</string>\r\n    <string name=\"action_stepcounter\">Pedometro</string>\r\n    <string name=\"addBusinessDialog\">Cliccare sul marker in rosso, per confermare l\\'inserimento dell\\'attività</string>\r\n    //networkcontroller\r\n    <string name=\"connect\">Connettiti</string>\r\n    <string name=\"Undo\">Annulla</string>\r\n    <string name=\"internetFail\">Connessione internet troppo debole o assente.</string>\r\n    //manageDiscount\r\n    <string name=\"correctInfo\">Inserimento sconto avvenuto con successo!</string>\r\n    <string name=\"expiringDialog\">Data di scadenza(gg/mm/aaaa)</string>\r\n    <string name=\"notSupportedVersion\">Inserire la data manualmente, poichè la versione del tuo dispositivo non supporta l inserimento automatico tramite calendario</string>\r\n    <string name=\"dateFormat\">Rispettare formato: gg/mm/aaaa</string>\r\n    <string name=\"stepRange\">Inserire un numero passi che sia compreso tra 2000 e 100000</string>\r\n    <string name=\"invalidDate\">Data non valida</string>\r\n    //SellerView\r\n    <string name=\"noActivity\">Nessuna attività registrata</string>\r\n    <string name=\"discount\"> Sconti </string>\r\n    <string name=\"noDiscount\">Nessuno sconto disponibile</string>\r\n    //CardView\r\n    <string name=\"share\">Ecco il codice sconto che ti è stato regalato:</string>\r\n    <string name=\"hereDiscount\">\"Ecco il tuo codice sconto:\"</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 8bbc455797d13a034c6d8613569de7058633ed25)
+++ app/src/main/res/values/strings.xml	(date 1612355143219)
@@ -83,4 +83,6 @@
     //CardView
     <string name="share">Ecco il codice sconto che ti è stato regalato:</string>
     <string name="hereDiscount">"Ecco il tuo codice sconto:"</string>
+    <string name="allert_discount_creation">Un nuovo sconto è stato aggiunto!</string>
+    <string name="allert_click_on_marker">Clicca sui contrassegni rossi nella mappa per scoprirne altri.</string>
 </resources>
\ No newline at end of file
Index: app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.appcompat.widget.SearchView;\r\nimport androidx.fragment.app.FragmentActivity;\r\n\r\nimport android.app.AlertDialog;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.location.Address;\r\nimport android.location.Geocoder;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.example.walktoshop.Model.Business;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.maps.CameraUpdateFactory;\r\nimport com.google.android.gms.maps.GoogleMap;\r\nimport com.google.android.gms.maps.OnMapReadyCallback;\r\nimport com.google.android.gms.maps.SupportMapFragment;\r\nimport com.google.android.gms.maps.model.LatLng;\r\nimport com.google.android.gms.maps.model.Marker;\r\nimport com.google.android.gms.maps.model.MarkerOptions;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.libraries.places.api.Places;\r\nimport com.google.android.libraries.places.api.net.PlacesClient;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\r\nimport com.google.firebase.firestore.QuerySnapshot;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class SellerMapView extends FragmentActivity implements OnMapReadyCallback {\r\n\r\n    FirebaseFirestore db=FirebaseFirestore.getInstance();\r\n    private GoogleMap mMap;\r\n    private String UID = null;\r\n    private static final String API_KEY = \"AIzaSyBrbjgwm3CB6qBhWaa3cMrRV3Ek9XW0cPc\";\r\n    SearchView search;\r\n    String location;\r\n    boolean isExisting = false;\r\n    List<LatLng> latLngs = new ArrayList<LatLng>();\r\n    Business business=new Business();\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_seller_map_view);\r\n        Intent intent = getIntent();\r\n        if(intent.hasExtra(\"UID\")){\r\n            UID=intent.getStringExtra(\"UID\");\r\n//            Log.d(\"uid\",UID);\r\n            SellerMapView.this.business.setOwnerUID(UID);\r\n        }\r\n        // Obtain the SupportMapFragment and get notified when the map is ready to be used.\r\n        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);\r\n        search = findViewById(R.id.search_bar);\r\n        if(!Places.isInitialized()){\r\n            Places.initialize(getApplicationContext(),API_KEY);\r\n        }\r\n        PlacesClient client=Places.createClient(this);\r\n        search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {\r\n            @Override\r\n            public boolean onQueryTextSubmit(String s) {\r\n                location=search.getQuery().toString();\r\n                List<Address> addresses=null;\r\n                if(location!=null || !location.trim().equals(\"\")){\r\n                    Geocoder geocoder=new Geocoder(SellerMapView.this);\r\n                    try{\r\n                        addresses=geocoder.getFromLocationName(location,1);\r\n                        if(addresses.isEmpty()){\r\n                            dialog();\r\n                        }\r\n                        Log.d(\"ADDRESS\", String.valueOf(addresses));\r\n                    }catch(Exception e){\r\n                        e.printStackTrace();\r\n                    }\r\n                    if (addresses!=null && !addresses.isEmpty()){\r\n                        Address addr=addresses.get(0);\r\n                        verifyBusiness(addr);\r\n                        Log.d(\"isExisting\", String.valueOf(isExisting));\r\n\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            @Override\r\n            public boolean onQueryTextChange(String s) {\r\n                return false;\r\n            }\r\n        });\r\n        mapFragment.getMapAsync(this);\r\n    }\r\n\r\n    private void verifyBusiness(Address addr) {\r\n\r\n        double latitude = addr.getLatitude();\r\n        double longitude = addr.getLongitude();\r\n        LatLng placeLatLng = new LatLng(latitude,longitude);\r\n        String locality = addr.getLocality();\r\n        Log.d(\"PLACE\", latitude+\"-\"+longitude+\"-\"+locality);\r\n\r\n        db.collection(\"attivita\").whereEqualTo(\"locality\", locality).get().addOnCompleteListener(new OnCompleteListener<QuerySnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<QuerySnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    for (QueryDocumentSnapshot document : task.getResult()){\r\n                        double lat = Double.parseDouble(document.getString(\"latitude\"));\r\n                        double longt = Double.parseDouble(document.getString(\"longitude\"));\r\n                        Log.d(\"DB-PLACE\", lat+\"-\"+longt);\r\n                        if(latitude == lat && longitude == longt){\r\n                            isExisting = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if(isExisting == true){\r\n                        AlertDialog.Builder builder = new AlertDialog.Builder(SellerMapView.this);\r\n                        // Add the buttons\r\n                        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n                            public void onClick(DialogInterface dialog, int id) {\r\n\r\n                            }\r\n                        }).setMessage(\"Attività già esistente, inseriscine un'altra.\");\r\n                        // Set other d\r\n                        builder.show();\r\n                        isExisting = false;\r\n                    } else {\r\n                        Log.d(\"place\",addr.getLatitude()+\"--\"+addr.getLongitude()+\"--\"+addr.getLocality());\r\n                        LatLng place=new LatLng(addr.getLatitude(),addr.getLongitude());\r\n                        mMap.addMarker(new MarkerOptions().position(place).title(location));\r\n                        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(place,15));\r\n                        Toast.makeText(SellerMapView.this, R.string.addBusinessDialog, Toast.LENGTH_LONG).show();\r\n\r\n                        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {\r\n                            @Override\r\n                            public boolean onMarkerClick(Marker marker) {\r\n                                if(SellerMapView.this.location.contains(\",\")){\r\n                                    String[] res = SellerMapView.this.location.split(\"[,]\", 0);\r\n                                    SellerMapView.this.location = res[0];\r\n                                }\r\n                                SellerMapView.this.business.setName(SellerMapView.this.location);\r\n                                SellerMapView.this.business.setLongitude(String.valueOf(addr.getLongitude()));\r\n                                SellerMapView.this.business.setLatitude(String.valueOf(addr.getLatitude()));\r\n                                SellerMapView.this.business.setLocality(addr.getLocality());\r\n                                SellerMapView.this.business.setUID(calculateMyBusinessCustomUID(addr.getLatitude(),addr.getLongitude()));\r\n                                Log.d(\"customuid\",SellerMapView.this.business.getUID());\r\n                                setBusiness(SellerMapView.this.business);\r\n                                return false;\r\n                            }\r\n                        });\r\n                        //inizalizzazione oggetto da scrivere\r\n                    }\r\n\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void onMapReady(GoogleMap googleMap) {\r\n        mMap = googleMap;\r\n\r\n        // Add a marker in Sydney and move the camera\r\n        LatLng italy = new LatLng(43.06103001266056, 12.882105287940128);\r\n        mMap.moveCamera(CameraUpdateFactory.newLatLng(italy));\r\n    }\r\n\r\n    private void setBusiness(Business business){\r\n\r\n        db.collection(\"attivita\").document(business.getUID()).set(this.business).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    getSeller(business.getUID());\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void getSeller(String businessCustomUID){\r\n        db.collection(\"venditore\").document(UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document = task.getResult();\r\n                    ArrayList<String> businessUID = (ArrayList<String>) document.get(\"businessUID\");\r\n                    if(businessUID == null)\r\n                    {\r\n                        businessUID = new ArrayList<>();\r\n                    }\r\n                    businessUID.add(businessCustomUID);\r\n                    Log.d(\"op\",businessUID.toString());\r\n                    updateSeller(businessUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void updateSeller(ArrayList<String> businessUID){\r\n        db.collection(\"venditore\").document(UID).update(\"businessUID\",businessUID).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful())\r\n                {\r\n                    Log.d(\"venditore\",\"successo\");\r\n                    finish();\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void dialog(){\r\n        AlertDialog.Builder builder = new AlertDialog.Builder(this);\r\n        // Add the buttons\r\n        builder.setNeutralButton(R.string.ok, new DialogInterface.OnClickListener() {\r\n            public void onClick(DialogInterface dialog, int id) {\r\n\r\n            }\r\n        }).setMessage(R.string.businessNotFound);\r\n        // Set other d\r\n        builder.show();\r\n    }\r\n    private String calculateMyBusinessCustomUID(Double latitude,Double longitude){\r\n        if(latitude!=null && longitude!=null){\r\n            String customUID=null;\r\n            customUID= String.valueOf(latitude+longitude);\r\n            customUID =customUID.replaceAll(\"[^0-9]\", \"\");\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(revision 8bbc455797d13a034c6d8613569de7058633ed25)
+++ app/src/main/java/com/example/walktoshop/Seller/SellerMapView.java	(date 1612361804273)
@@ -51,19 +51,26 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_seller_map_view);
+
+        //riceve l'intent contenente l'identificatore univoco dell'utente
         Intent intent = getIntent();
         if(intent.hasExtra("UID")){
             UID=intent.getStringExtra("UID");
-//            Log.d("uid",UID);
             SellerMapView.this.business.setOwnerUID(UID);
         }
-        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
+
+        //il getSupportFragment il fragment contenente la mappa, all'interno del layout  dell'activity
         SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map);
+
         search = findViewById(R.id.search_bar);
+        //inizializzazione delle places API
         if(!Places.isInitialized()){
             Places.initialize(getApplicationContext(),API_KEY);
         }
         PlacesClient client=Places.createClient(this);
+        /**
+         * viene settato un listener sulla
+         */
         search.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
             @Override
             public boolean onQueryTextSubmit(String s) {

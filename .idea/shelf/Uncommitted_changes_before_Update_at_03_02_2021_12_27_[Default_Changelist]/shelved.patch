Index: app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\n\r\nimport android.app.DatePickerDialog;\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.Button;\r\nimport android.widget.DatePicker;\r\nimport android.widget.EditText;\r\nimport android.widget.ImageButton;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.walktoshop.Model.Discount;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.Date;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class ManageDiscount extends AppCompatActivity {\r\n    FirebaseFirestore db = FirebaseFirestore.getInstance();\r\n    private String businessUID=null;\r\n    private EditText description;\r\n    private EditText quantity;\r\n    private TextView expiringDate;\r\n    private Button add;\r\n    private ImageButton addDate;\r\n    private Calendar cal;\r\n    private String dateEditText;\r\n    private String[] separetedDate;\r\n    private boolean fromEditText;\r\n    int date;\r\n    long expiringDateInMillis;\r\n    String stringedDescription;\r\n    String todayInMills;\r\n    String stringedQuantity;\r\n\r\n    //DatePickerDialog.OnDateSetListener listener;\r\n\r\n    @Override\r\n    protected void onSaveInstanceState(@NonNull Bundle outState) {\r\n        super.onSaveInstanceState(outState);\r\n        outState.putString(\"description\", description.getText().toString());\r\n        outState.putString(\"quantity\", quantity.getText().toString());\r\n        outState.putString(\"expiringDate\", expiringDate.getText().toString());\r\n    }\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_managediscount);\r\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\r\n        getSupportActionBar().setHomeButtonEnabled(true);\r\n        Intent intent=getIntent();\r\n        if(intent.hasExtra(\"businessUID\")){\r\n            this.businessUID=intent.getStringExtra(\"businessUID\");\r\n        }\r\n        //inizializzazione variabli\r\n        addDate=(ImageButton)findViewById(R.id.addDate);\r\n        expiringDate=(TextView) findViewById(R.id.expiringDate);\r\n        description=(EditText)findViewById(R.id.description);\r\n        quantity=(EditText)findViewById(R.id.disocuntsQuantity);\r\n        add=(Button)findViewById(R.id.add);\r\n        //setting date picker\r\n\r\n        if(savedInstanceState != null){\r\n            description.setText(savedInstanceState.getString(\"description\"));\r\n            quantity.setText(savedInstanceState.getString(\"quantity\"));\r\n            expiringDate.setText(savedInstanceState.getString(\"expiringDate\"));\r\n        }\r\n\r\n        cal=Calendar.getInstance();\r\n        this.todayInMills=getTodayInMills();\r\n        expiringDate.setEnabled(false);\r\n        //\r\n        addDate.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                //metodo set datepicker\r\n                date=cal.get(Calendar.DATE);\r\n                int month=cal.get(Calendar.MONTH);\r\n                Log.d(\"month\", String.valueOf(month));\r\n                int year=cal.get(Calendar.YEAR);\r\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {\r\n                    expiringDate.setEnabled(false);\r\n                    fromEditText = false;\r\n                    DatePickerDialog datePickerDialog=new DatePickerDialog(ManageDiscount.this, android.R.style.Theme_DeviceDefault_Dialog, new DatePickerDialog.OnDateSetListener() {\r\n                        @Override\r\n                        public void onDateSet(DatePicker datePicker, int year, int month, int date) {\r\n                            month = month + 1;\r\n                            String dateFormat = null;\r\n                            if(month < 10 ){\r\n                                if (date < 10){\r\n                                    dateFormat=\"0\"+date+\"/\"+\"0\"+month+\"/\"+year;\r\n                                } else {\r\n                                    dateFormat=date+\"/\"+\"0\"+month+\"/\"+year;\r\n                                }\r\n\r\n                            } else {\r\n                                if (date < 10){\r\n                                    dateFormat = \"0\"+date+\"/\"+month+\"/\"+year;\r\n                                } else{\r\n                                    dateFormat = date+\"/\"+month+\"/\"+year;\r\n                                }\r\n                            }\r\n\r\n                            Date date1 = null;\r\n                            try {\r\n                                date1 = new SimpleDateFormat(\"dd/MM/yyyy\").parse(dateFormat);\r\n                            } catch (ParseException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                            Log.d(\"data\",dateFormat);\r\n                            expiringDate.setText(dateFormat);\r\n\r\n                            ManageDiscount.this.expiringDateInMillis =  date1.getTime();\r\n                        }\r\n                    },year,month,date);\r\n                    datePickerDialog.show();\r\n                }else{\r\n                    Toast toast = Toast.makeText(ManageDiscount.this,\"Inserire la data manualmente, poichÃ¨ la versione del tuo dispositivo non supporta l'inserimento automatico tramite calendario\",Toast.LENGTH_LONG);\r\n                    toast.setGravity(Gravity.CENTER, 0, 0);\r\n                    toast.show();\r\n                    expiringDate.setEnabled(true);\r\n                    expiringDate.setHint(\"Data di scadenza(gg/mm/aaaa)\");\r\n                    fromEditText = true;\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n\r\n        add.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                if(checkInfo()){\r\n                    Discount discount= new Discount();\r\n                    String customDiscountUID=calculateMyCustomDiscountUID(businessUID,expiringDateInMillis);\r\n                    discount.setUID(customDiscountUID);\r\n                    discount.setBusinessUID(businessUID);\r\n                    discount.setExpiringDate(String.valueOf(expiringDateInMillis));\r\n                    discount.setDescription(stringedDescription);\r\n                    discount.setDiscountsQuantity(stringedQuantity);\r\n                    discount.setStartDiscountDate(todayInMills);\r\n                    addDiscount(customDiscountUID,discount);\r\n                    Toast toast = Toast.makeText(getApplicationContext(),\"Inserimento sconto avvenuto con successo!\",Toast.LENGTH_SHORT);\r\n                    toast.show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(ManageDiscount.this)){\r\n            networkController.connectionDialog(ManageDiscount.this);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public boolean onOptionsItemSelected(@NonNull MenuItem item) {\r\n        if(item.getItemId() == android.R.id.home){\r\n            finish();\r\n        }\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n\r\n    private void addDiscount(String customDiscountUID, Discount discount){\r\n        db.collection(\"sconti\").document(customDiscountUID).set(discount).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    Log.d(\"customDiscountUID\",customDiscountUID);\r\n                    getBusiness(customDiscountUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean checkDateFormat(){\r\n        String stringDate = dateEditText;\r\n         Pattern DATE_PATTERN = Pattern.compile(\"([0-9]{2})/([0-9]{2})/([0-9]{4})\");\r\n        separetedDate = stringDate.split(\"/\");\r\n        Date dateEditText = null;\r\n\r\n        try {\r\n             dateEditText = new SimpleDateFormat(\"dd/MM/yyyy\").parse(stringDate);\r\n        } catch (ParseException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if(stringDate.isEmpty()){\r\n            this.expiringDate.setError(getResources().getString(R.string.EmptyDate));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(!DATE_PATTERN.matcher(stringDate).matches()){\r\n             Toast toast = Toast.makeText(ManageDiscount.this,\"Rispettare formato: gg/mm/aaaa\",Toast.LENGTH_LONG);\r\n             toast.setGravity(Gravity.CENTER, 0, 0);\r\n             toast.show();\r\n             this.expiringDate.setError(getResources().getString(R.string.InvalidDateFormat));\r\n             this.expiringDate.requestFocus();\r\n             return false;\r\n         }else if(Integer.parseInt(separetedDate[0]) <= 00 || Integer.parseInt(separetedDate[0]) > 31){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotADay));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(Integer.parseInt(separetedDate[1]) <= 00 || Integer.parseInt(separetedDate[1]) > 12){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotAMonth));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(Integer.parseInt(separetedDate[2]) < Calendar.getInstance().get(Calendar.YEAR)){\r\n            this.expiringDate.setError(getResources().getString(R.string.NotAYearFree));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(dateEditText.getTime() <= Calendar.getInstance().getTimeInMillis()){\r\n            this.expiringDate.setError(getResources().getString(R.string.InvalidDate));\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }\r\n\r\n         ManageDiscount.this.expiringDateInMillis =  dateEditText.getTime();\r\n         return true;\r\n    }\r\n\r\n    private void getBusiness(String customDiscountUID){\r\n        db.collection(\"attivita\").document(businessUID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                if(task.isSuccessful()){\r\n                    DocumentSnapshot document=task.getResult();\r\n                    ArrayList<String> discountUID= (ArrayList<String>) document.get(\"discountUID\");\r\n                    if(discountUID == null){\r\n                        discountUID =new ArrayList<String>();\r\n                    }\r\n                    discountUID.add(customDiscountUID);\r\n                    updateBusiness(discountUID);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    private void updateBusiness(ArrayList<String> discountUID){\r\n        db.collection(\"attivita\").document(businessUID).update(\"discountUID\",discountUID).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                if(task.isSuccessful()){\r\n                    Log.d(\"caricamento\",\"caricamento effettuato correttamente\");\r\n                }else{\r\n                    Log.d(\"caricamento\",\"caricamento non effettuato correttamente\");\r\n                }\r\n            }\r\n        }).addOnCompleteListener(new OnCompleteListener<Void>() {\r\n            @Override\r\n            public void onComplete(@NonNull Task<Void> task) {\r\n                finish();\r\n            }\r\n        });\r\n    }\r\n\r\n    private boolean checkInfo(){\r\n        stringedDescription=this.description.getText().toString().trim();\r\n        stringedQuantity=this.quantity.getText().toString().trim();\r\n        if(fromEditText)\r\n        dateEditText = expiringDate.getText().toString().trim();\r\n       // Log.d(\"MILLIS\", String.valueOf(expiringDateInMillis));\r\n        //Log.d(\"MILLIS\", String.valueOf(cal.getTimeInMillis()));\r\n\r\n        if(stringedDescription.isEmpty() || stringedDescription.length()>50){\r\n            this.description.setError( getResources().getString(R.string.InvalidDescription));\r\n            this.description.requestFocus();\r\n            return false;\r\n        }else if(stringedQuantity.isEmpty()){\r\n            this.quantity.setError( getResources().getString(R.string.numStepsEmpty));\r\n            this.quantity.requestFocus();\r\n            return false;\r\n        }else if(Long.parseLong(stringedQuantity) < 2000||  Long.parseLong(stringedQuantity) > 60000){\r\n            Toast toast = Toast.makeText(this,\"inserire un numero passi che sia compreso tra 2000 e 100000\",Toast.LENGTH_LONG);\r\n            toast.setGravity(Gravity.CENTER, 0, 0);\r\n            toast.show();\r\n            this.quantity.setError( getResources().getString(R.string.numStepsNotValid));\r\n            this.quantity.requestFocus();\r\n            return false;\r\n        } else if ((expiringDateInMillis <= cal.getTimeInMillis() || expiringDateInMillis == 0) && !fromEditText){\r\n            //mettere un avviso che indica di inserire correttamente la data\r\n            this.expiringDate.setError(\"Data non valida\");\r\n            this.expiringDate.requestFocus();\r\n            return false;\r\n        }else if(fromEditText && !checkDateFormat()){\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n    private String calculateMyCustomDiscountUID(String businessUID,long timeInMillis){\r\n        String stringedTimeInMills= String.valueOf(System.currentTimeMillis());\r\n        if(businessUID!=null && stringedTimeInMills!=null){\r\n            String customUID=null;\r\n            customUID= businessUID+stringedTimeInMills;\r\n            return customUID;\r\n        }else{\r\n            return null;\r\n        }\r\n    }\r\n    private String getTodayInMills(){\r\n        Calendar cal = Calendar.getInstance();\r\n        int year  = cal.get(Calendar.YEAR);\r\n        int month = cal.get(Calendar.MONTH);\r\n        int date  = cal.get(Calendar.DATE);\r\n        cal.clear();\r\n        cal.set(year, month, date);\r\n        long todayMillis2 = cal.getTimeInMillis();\r\n        return String.valueOf(todayMillis2);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java	(revision 6bb7bbd607eb0685651cf3a739294993f9576e4f)
+++ app/src/main/java/com/example/walktoshop/Seller/ManageDiscount.java	(date 1612351133060)
@@ -33,27 +33,33 @@
 import java.util.Calendar;
 import java.util.Date;
 import java.util.regex.Pattern;
-
+/*
+Activity che consentirÃ  all'utente di effettuare l'operazione di aggiunta di uno sconto inserendo informazioni come una breve descrizione
+dello sconto in questione ,il numero di passi compreso in un range (2000-60000) che il venditore dovrÃ  raggiungere e una data di scadenza
+successivamente una volta soddisfatti tutti questi requisiti l'utente potrÃ  aggiungere uno sconto relativo alla propria attivitÃ 
+ */
 public class ManageDiscount extends AppCompatActivity {
-    FirebaseFirestore db = FirebaseFirestore.getInstance();
-    private String businessUID=null;
+    FirebaseFirestore db = FirebaseFirestore.getInstance();//istanziazione db
+    private String businessUID=null;//id dell'attivitÃ  del venditore
     private EditText description;
     private EditText quantity;
-    private TextView expiringDate;
+    private TextView expiringDate;//data di scadenza che verrÃ  mostrata a schermo per ogni sconto qualora non scaduta
     private Button add;
     private ImageButton addDate;
-    private Calendar cal;
+    private Calendar cal;//istanziazione calendario che servirÃ  dopo per effettuare calcoli sulla scadenza
     private String dateEditText;
     private String[] separetedDate;
     private boolean fromEditText;
     int date;
-    long expiringDateInMillis;
+    long expiringDateInMillis;//data di scadenza in millisecondi
     String stringedDescription;
     String todayInMills;
     String stringedQuantity;
 
     //DatePickerDialog.OnDateSetListener listener;
-
+    /*
+    Salvataggio dello stato quando un venditore sta riempiendo i campi,ad esempio in caso di rotazione dello schermo...
+     */
     @Override
     protected void onSaveInstanceState(@NonNull Bundle outState) {
         super.onSaveInstanceState(outState);
@@ -68,6 +74,7 @@
         setContentView(R.layout.activity_managediscount);
         getSupportActionBar().setDisplayHomeAsUpEnabled(true);
         getSupportActionBar().setHomeButtonEnabled(true);
+        //Viene ricevuto l'uid dell'attivitÃ  del venditore ,inviato tramite intent da SellerView in modo da poter fare le query sul db
         Intent intent=getIntent();
         if(intent.hasExtra("businessUID")){
             this.businessUID=intent.getStringExtra("businessUID");
@@ -89,15 +96,18 @@
         cal=Calendar.getInstance();
         this.todayInMills=getTodayInMills();
         expiringDate.setEnabled(false);
-        //
+        //Aggiunta data
         addDate.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
-                //metodo set datepicker
                 date=cal.get(Calendar.DATE);
                 int month=cal.get(Calendar.MONTH);
-                Log.d("month", String.valueOf(month));
                 int year=cal.get(Calendar.YEAR);
+                /*
+                Viene usato un datepicker qualora l'sdk version sia superiore a quella richiesta in tal caso vengono effettuati controlli sulla data
+                di modo che un venditore non possa mettere una data antecedente a quella di oggi.L'inserimento Ã¨ dunque controllato anche per utenti
+                di versioni di sdk piÃ¹ basse,in questo caso infatti Ã¨ richiesa l'inserimento della data in modo manuale con i relativi controlli
+                 */
                 if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.N) {
                     expiringDate.setEnabled(false);
                     fromEditText = false;
@@ -106,6 +116,7 @@
                         public void onDateSet(DatePicker datePicker, int year, int month, int date) {
                             month = month + 1;
                             String dateFormat = null;
+                            //controlli sulla formattazione della data a schermo
                             if(month < 10 ){
                                 if (date < 10){
                                     dateFormat="0"+date+"/"+"0"+month+"/"+year;
@@ -123,44 +134,47 @@
 
                             Date date1 = null;
                             try {
+                                //la data in stringa viene poi formattata
                                 date1 = new SimpleDateFormat("dd/MM/yyyy").parse(dateFormat);
                             } catch (ParseException e) {
                                 e.printStackTrace();
                             }
-                            Log.d("data",dateFormat);
                             expiringDate.setText(dateFormat);
-
+                            //la data Ã¨ poi trasformata in millisecondi per una questione di comoditÃ  nei calcoli
                             ManageDiscount.this.expiringDateInMillis =  date1.getTime();
                         }
                     },year,month,date);
                     datePickerDialog.show();
                 }else{
-                    Toast toast = Toast.makeText(ManageDiscount.this,"Inserire la data manualmente, poichÃ¨ la versione del tuo dispositivo non supporta l'inserimento automatico tramite calendario",Toast.LENGTH_LONG);
+                    Toast toast = Toast.makeText(ManageDiscount.this,getResources().getString(R.string.notSupportedVersion),Toast.LENGTH_LONG);
                     toast.setGravity(Gravity.CENTER, 0, 0);
                     toast.show();
                     expiringDate.setEnabled(true);
-                    expiringDate.setHint("Data di scadenza(gg/mm/aaaa)");
+                    expiringDate.setHint(getResources().getString(R.string.expiringDialog));
                     fromEditText = true;
                 }
             }
         });
 
 
-
+        //Aggiunta sconto
         add.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
+                /*
+                Dopo essere stati controllati gli input viene creato un oggetto ,riempito e settato sul db
+                 */
                 if(checkInfo()){
                     Discount discount= new Discount();
-                    String customDiscountUID=calculateMyCustomDiscountUID(businessUID,expiringDateInMillis);
+                    String customDiscountUID=calculateMyCustomDiscountUID(businessUID);
                     discount.setUID(customDiscountUID);
                     discount.setBusinessUID(businessUID);
                     discount.setExpiringDate(String.valueOf(expiringDateInMillis));
                     discount.setDescription(stringedDescription);
                     discount.setDiscountsQuantity(stringedQuantity);
                     discount.setStartDiscountDate(todayInMills);
-                    addDiscount(customDiscountUID,discount);
-                    Toast toast = Toast.makeText(getApplicationContext(),"Inserimento sconto avvenuto con successo!",Toast.LENGTH_SHORT);
+                    addDiscount(customDiscountUID,discount);//query di aggiunta sconto sul db
+                    Toast toast = Toast.makeText(getApplicationContext(),getResources().getString((R.string.correctInfo)),Toast.LENGTH_SHORT);
                     toast.show();
                 }
             }
@@ -170,6 +184,7 @@
     @Override
     protected void onStart() {
         super.onStart();
+        //controllo che internet sia sempre presente altrimenti dialog di avvertenza con eventuale refresh dell'activity in caso di riconnessione
         NetworkController networkController =new NetworkController();
         if(!networkController.isConnected(ManageDiscount.this)){
             networkController.connectionDialog(ManageDiscount.this);
@@ -183,19 +198,61 @@
         }
         return super.onOptionsItemSelected(item);
     }
-
+    /**
+    Query di aggiunta al db che richiama una query all'attivitÃ   per l'inserimento dello sconto anche nella tabella attivitÃ 
+     */
     private void addDiscount(String customDiscountUID, Discount discount){
         db.collection("sconti").document(customDiscountUID).set(discount).addOnCompleteListener(new OnCompleteListener<Void>() {
             @Override
             public void onComplete(@NonNull Task<Void> task) {
                 if(task.isSuccessful()){
-                    Log.d("customDiscountUID",customDiscountUID);
                     getBusiness(customDiscountUID);
                 }
             }
         });
     }
-
+    /**
+    Query che inserisce lo sconto anche nella tabella attivitÃ 
+     */
+    private void getBusiness(String customDiscountUID){
+        db.collection("attivita").document(businessUID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
+            @Override
+            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
+                if(task.isSuccessful()){
+                    DocumentSnapshot document=task.getResult();
+                    ArrayList<String> discountUID= (ArrayList<String>) document.get("discountUID");
+                    if(discountUID == null){
+                        discountUID =new ArrayList<String>();
+                    }
+                    discountUID.add(customDiscountUID);
+                    updateBusiness(discountUID);
+                }
+            }
+        });
+    }
+    /**
+    Query che sovrascrive i vecchi sconti erogati dall'attivitÃ  con i precedenti e in piu lo sconto appena aggiunto
+     */
+    private void updateBusiness(ArrayList<String> discountUID){
+        db.collection("attivita").document(businessUID).update("discountUID",discountUID).addOnCompleteListener(new OnCompleteListener<Void>() {
+            @Override
+            public void onComplete(@NonNull Task<Void> task) {
+                if(task.isSuccessful()){
+                    Log.d("caricamento","caricamento effettuato correttamente");
+                }else{
+                    Log.d("caricamento","caricamento non effettuato correttamente");
+                }
+            }
+        }).addOnCompleteListener(new OnCompleteListener<Void>() {
+            @Override
+            public void onComplete(@NonNull Task<Void> task) {
+                finish();
+            }
+        });
+    }
+    /**
+    Metoodo che controlla che la data anche se inserita manualmente in caso di versioni che non supportino il datepicker sia corretta
+     */
     private boolean checkDateFormat(){
         String stringDate = dateEditText;
          Pattern DATE_PATTERN = Pattern.compile("([0-9]{2})/([0-9]{2})/([0-9]{4})");
@@ -213,7 +270,7 @@
             this.expiringDate.requestFocus();
             return false;
         }else if(!DATE_PATTERN.matcher(stringDate).matches()){
-             Toast toast = Toast.makeText(ManageDiscount.this,"Rispettare formato: gg/mm/aaaa",Toast.LENGTH_LONG);
+             Toast toast = Toast.makeText(ManageDiscount.this,getResources().getString(R.string.dateFormat),Toast.LENGTH_LONG);
              toast.setGravity(Gravity.CENTER, 0, 0);
              toast.show();
              this.expiringDate.setError(getResources().getString(R.string.InvalidDateFormat));
@@ -241,47 +298,15 @@
          return true;
     }
 
-    private void getBusiness(String customDiscountUID){
-        db.collection("attivita").document(businessUID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
-            @Override
-            public void onComplete(@NonNull Task<DocumentSnapshot> task) {
-                if(task.isSuccessful()){
-                    DocumentSnapshot document=task.getResult();
-                    ArrayList<String> discountUID= (ArrayList<String>) document.get("discountUID");
-                    if(discountUID == null){
-                        discountUID =new ArrayList<String>();
-                    }
-                    discountUID.add(customDiscountUID);
-                    updateBusiness(discountUID);
-                }
-            }
-        });
-    }
-    private void updateBusiness(ArrayList<String> discountUID){
-        db.collection("attivita").document(businessUID).update("discountUID",discountUID).addOnCompleteListener(new OnCompleteListener<Void>() {
-            @Override
-            public void onComplete(@NonNull Task<Void> task) {
-                if(task.isSuccessful()){
-                    Log.d("caricamento","caricamento effettuato correttamente");
-                }else{
-                    Log.d("caricamento","caricamento non effettuato correttamente");
-                }
-            }
-        }).addOnCompleteListener(new OnCompleteListener<Void>() {
-            @Override
-            public void onComplete(@NonNull Task<Void> task) {
-                finish();
-            }
-        });
-    }
+/**
+Metodo che controlla sintatticamente che tutte le informazioni fornite dal venditore siano corrette
+ */
 
     private boolean checkInfo(){
         stringedDescription=this.description.getText().toString().trim();
         stringedQuantity=this.quantity.getText().toString().trim();
         if(fromEditText)
         dateEditText = expiringDate.getText().toString().trim();
-       // Log.d("MILLIS", String.valueOf(expiringDateInMillis));
-        //Log.d("MILLIS", String.valueOf(cal.getTimeInMillis()));
 
         if(stringedDescription.isEmpty() || stringedDescription.length()>50){
             this.description.setError( getResources().getString(R.string.InvalidDescription));
@@ -291,8 +316,9 @@
             this.quantity.setError( getResources().getString(R.string.numStepsEmpty));
             this.quantity.requestFocus();
             return false;
-        }else if(Long.parseLong(stringedQuantity) < 2000||  Long.parseLong(stringedQuantity) > 60000){
-            Toast toast = Toast.makeText(this,"inserire un numero passi che sia compreso tra 2000 e 100000",Toast.LENGTH_LONG);
+        }else if(Long.parseLong(stringedQuantity) < 2000 ||  Long.parseLong(stringedQuantity) > 60000){
+            // i passi vengono definiti in un certo range di modo che il venditore non possa inserirne troppi o troppo pochi
+            Toast toast = Toast.makeText(this,getResources().getString(R.string.stepRange),Toast.LENGTH_LONG);
             toast.setGravity(Gravity.CENTER, 0, 0);
             toast.show();
             this.quantity.setError( getResources().getString(R.string.numStepsNotValid));
@@ -300,7 +326,7 @@
             return false;
         } else if ((expiringDateInMillis <= cal.getTimeInMillis() || expiringDateInMillis == 0) && !fromEditText){
             //mettere un avviso che indica di inserire correttamente la data
-            this.expiringDate.setError("Data non valida");
+            this.expiringDate.setError(getResources().getString(R.string.invalidDate));
             this.expiringDate.requestFocus();
             return false;
         }else if(fromEditText && !checkDateFormat()){
@@ -310,16 +336,23 @@
 
         return true;
     }
-    private String calculateMyCustomDiscountUID(String businessUID,long timeInMillis){
+    /**
+    Metodo che calcola un id univoco per poi settare lo sconto sul db l'id
+     */
+    private String calculateMyCustomDiscountUID(String businessUID){
         String stringedTimeInMills= String.valueOf(System.currentTimeMillis());
         if(businessUID!=null && stringedTimeInMills!=null){
             String customUID=null;
+            //l'id Ã¨ composto dall'id dell'attivitÃ  concatenato con l'orario in millisecondi corrente
             customUID= businessUID+stringedTimeInMills;
             return customUID;
         }else{
             return null;
         }
     }
+    /**
+    Metodo che restitusce la data di oggi in millisecondi
+     */
     private String getTodayInMills(){
         Calendar cal = Calendar.getInstance();
         int year  = cal.get(Calendar.YEAR);
Index: app/src/main/java/com/example/walktoshop/Seller/SellerView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.walktoshop.Seller;\r\n\r\nimport android.content.Intent;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.Menu;\r\nimport android.view.MenuItem;\r\nimport android.view.View;\r\nimport android.widget.ImageButton;\r\nimport android.widget.ImageView;\r\nimport android.widget.ListView;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.Nullable;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.walktoshop.Login_SignUp.LogIn;\r\nimport com.example.walktoshop.Model.Discount;\r\nimport com.example.walktoshop.Utils.NetworkController;\r\nimport com.example.walktoshop.R;\r\nimport com.example.walktoshop.Utils.ViewAdapter;\r\nimport com.google.android.gms.tasks.OnCompleteListener;\r\nimport com.google.android.gms.tasks.Task;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\nimport com.google.firebase.auth.FirebaseAuth;\r\nimport com.google.firebase.firestore.DocumentSnapshot;\r\nimport com.google.firebase.firestore.FirebaseFirestore;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class SellerView extends AppCompatActivity {\r\n    private ListView listView;\r\n    private TextView alert;\r\n    private String UID=null;\r\n    private ProgressBar progressBar;\r\n    private FloatingActionButton addActivityButton;\r\n    private ImageButton editDiscount;\r\n    private ImageButton deleteDiscount;\r\n    FirebaseFirestore db =FirebaseFirestore.getInstance();\r\n    private ArrayList<Discount> discountArray=new ArrayList<>();\r\n    private ArrayList<String> businessUID =new ArrayList<>();\r\n    private ArrayList<String> discountUID = new ArrayList<>();\r\n    private FloatingActionButton mFab;\r\n    private  ImageView discountImage;\r\n    private TextView scontiAttivita;\r\n\r\n    @Override\r\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_seller_view);\r\n        alert = (TextView) findViewById(R.id.alertSeller);\r\n        //View coordinatorLayout = findViewById(android.R.id.content);\r\n        addActivityButton=(FloatingActionButton)findViewById(R.id.addBusinessFab);\r\n        scontiAttivita = (TextView) findViewById(R.id.scontiAttivita);\r\n        discountImage = findViewById(R.id.discountImage);\r\n        addActivityButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                goSellerMapView();\r\n                addActivityButton.setVisibility(View.INVISIBLE);\r\n            }\r\n        });\r\n        mFab = (FloatingActionButton) findViewById(R.id.fab);\r\n        mFab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                startManageDiscount();\r\n            }\r\n        });\r\n        progressBar=findViewById(R.id.sellerViewProgressBar);\r\n        listView=findViewById(R.id.listView);\r\n        Intent intent = getIntent();\r\n        if(intent.hasExtra(\"UID\")){\r\n            UID=intent.getStringExtra(\"UID\");\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onStart() {\r\n        super.onStart();\r\n        NetworkController networkController =new NetworkController();\r\n        if(!networkController.isConnected(SellerView.this)){\r\n            networkController.connectionDialog(SellerView.this);\r\n        }\r\n        getSellerBusinessUID();\r\n        if(businessUID == null){\r\n            businessUID = new ArrayList<String>();\r\n        }else if(businessUID.size()<= 0){\r\n            addActivityButton.setVisibility(View.VISIBLE);\r\n            discountImage.setVisibility(View.GONE);\r\n            scontiAttivita.setVisibility(View.GONE);\r\n            alert.setText(\"Nessuna attivitÃ  registrata\");\r\n            addActivityButton.setVisibility(View.VISIBLE);\r\n            mFab.setVisibility(View.GONE);\r\n        }else if(discountUID==null){\r\n            addActivityButton.setVisibility(View.INVISIBLE);\r\n        }else if(discountUID.isEmpty()){\r\n            addActivityButton.setVisibility(View.INVISIBLE);\r\n        }\r\n    }\r\n\r\n    public boolean onCreateOptionsMenu(Menu menu){\r\n        getMenuInflater().inflate(R.menu.menu_action_bar, menu);\r\n        return true;\r\n    }\r\n\r\n    public boolean onOptionsItemSelected(MenuItem item){\r\n        return super.onOptionsItemSelected(item);\r\n    }\r\n    public void OnItemSelected(MenuItem item) {\r\n        if(item.getItemId() == R.id.action_exit){\r\n            logOut();\r\n        }\r\n    }\r\n\r\n    private void getSellerBusinessUID(){\r\n        if(UID!=null){\r\n            db.collection(\"venditore\").document(this.UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                @Override\r\n                public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                    if(task.isSuccessful()){\r\n                        DocumentSnapshot document= task.getResult();\r\n                        businessUID= (ArrayList) document.get(\"businessUID\");\r\n                        //se ha delle attivitÃ  le recupera\r\n                        //Log.d(\"businessUID\", String.valueOf(businessUID.size()));\r\n                        if(businessUID!=null){\r\n                            progressBar.setVisibility(View.VISIBLE);\r\n                            getBusiness();\r\n                            progressBar.setVisibility(View.INVISIBLE);\r\n                        }else{\r\n                            alert.setText(\"Nessuna attivitÃ  registrata\");\r\n                            addActivityButton.setVisibility(View.VISIBLE);\r\n                            progressBar.setVisibility(View.INVISIBLE);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    private void getBusiness(){\r\n        if(businessUID!=null && !businessUID.isEmpty()){\r\n            addActivityButton.setVisibility(View.INVISIBLE);\r\n            scontiAttivita.setVisibility(View.VISIBLE);\r\n            discountImage.setVisibility(View.VISIBLE);\r\n            mFab.setVisibility(View.VISIBLE);\r\n            for(int i=0;i<businessUID.size();i++){\r\n                String b=businessUID.get(i);\r\n                Log.d(\"b\",b);\r\n                db.collection(\"attivita\").document(b).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                        if(task.isSuccessful()){\r\n                            DocumentSnapshot document= task.getResult();\r\n                            if (document.exists()) {\r\n                                //Log.d(\"TAG\", \"DocumentSnapshot data: \" + document.getData());\r\n                                discountUID=(ArrayList) document.get(\"discountUID\");\r\n                                String name = document.getString(\"name\");\r\n                                scontiAttivita.setText( \"Sconti \" + name + \":\");\r\n                                //Log.d(\"TAG\", \"uid dello sconto\" + discountUID.toString());\r\n                                if(discountUID!=null && !discountUID.isEmpty()){\r\n                                    getDiscounts();\r\n                                }else{\r\n                                    alert.setText(\"Nessuno sconto disponibile\");\r\n                                    alert.setVisibility(View.VISIBLE);\r\n                                    final ViewAdapter adapter=new ViewAdapter(SellerView.this,discountArray, UID,businessUID,\"sellerHome\");\r\n                                    listView.setAdapter(adapter);\r\n                                }\r\n                            } else {\r\n                                Log.d(\"TAG\", \"No such document\");\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    private void getDiscounts(){\r\n        discountArray.clear();\r\n            for(int k=0;k<discountUID.size();k++){\r\n                db.collection(\"sconti\").document(discountUID.get(k)).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                        if(task.isSuccessful()){\r\n                            Discount discount=new Discount();\r\n                            DocumentSnapshot document=task.getResult();\r\n                            discount.setUID(document.getString(\"uid\"));\r\n                            discount.setBusinessUID(document.getString(\"businessUID\"));\r\n                            discount.setStartDiscountDate(document.getString(\"startDiscountDate\"));\r\n                            discount.setExpiringDate(document.getString(\"expiringDate\"));\r\n                            discount.setDescription(document.getString(\"description\"));\r\n                            discount.setDiscountsQuantity(document.getString(\"discountsQuantity\"));\r\n                            discountArray.add(discount);\r\n                        }\r\n                    }\r\n                }).addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {\r\n                    @Override\r\n                    public void onComplete(@NonNull Task<DocumentSnapshot> task) {\r\n                        final ViewAdapter adapter=new ViewAdapter(SellerView.this,discountArray, UID,businessUID,\"sellerHome\");\r\n                        listView.setAdapter(adapter);\r\n                    }\r\n                });\r\n            }\r\n    }\r\n\r\n    private void goSellerMapView(){\r\n        final Intent intent = new Intent(this, SellerMapView.class);\r\n        intent.putExtra(\"UID\",UID);\r\n        startActivity(intent);\r\n    }\r\n    private void startManageDiscount(){\r\n        final Intent intent = new Intent(this, ManageDiscount.class);\r\n        intent.putExtra(\"businessUID\",businessUID.get(0));\r\n        //Log.d(\"u\",businessUID.get(0).toString());\r\n        startActivity(intent);\r\n    }\r\n\r\n    private void logOut(){\r\n        FirebaseAuth.getInstance().signOut();\r\n        final Intent intent = new Intent(this, LogIn.class);\r\n        startActivity(intent);\r\n        finish();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/walktoshop/Seller/SellerView.java	(revision 6bb7bbd607eb0685651cf3a739294993f9576e4f)
+++ app/src/main/java/com/example/walktoshop/Seller/SellerView.java	(date 1612351133054)
@@ -29,15 +29,16 @@
 import com.google.firebase.firestore.FirebaseFirestore;
 
 import java.util.ArrayList;
-
+/*
+Activity che consente al venditore di passare alla registrazione attivitÃ  e possiede una listView
+per consentire al venditore di vedere i propri sconti
+ */
 public class SellerView extends AppCompatActivity {
     private ListView listView;
     private TextView alert;
     private String UID=null;
     private ProgressBar progressBar;
     private FloatingActionButton addActivityButton;
-    private ImageButton editDiscount;
-    private ImageButton deleteDiscount;
     FirebaseFirestore db =FirebaseFirestore.getInstance();
     private ArrayList<Discount> discountArray=new ArrayList<>();
     private ArrayList<String> businessUID =new ArrayList<>();
@@ -50,11 +51,12 @@
     protected void onCreate(@Nullable Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_seller_view);
+
         alert = (TextView) findViewById(R.id.alertSeller);
-        //View coordinatorLayout = findViewById(android.R.id.content);
         addActivityButton=(FloatingActionButton)findViewById(R.id.addBusinessFab);
         scontiAttivita = (TextView) findViewById(R.id.scontiAttivita);
         discountImage = findViewById(R.id.discountImage);
+        //una volta premuto il fab button il venditore senza attivitÃ  registrata viene rimandato alla SellerMap
         addActivityButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
@@ -62,6 +64,10 @@
                 addActivityButton.setVisibility(View.INVISIBLE);
             }
         });
+        /*
+        Attraverso un gioco di visibilitÃ  il bottone di aggiunta sconti Ã¨ visibile solo se il venditore ha registrato la sua attivitÃ .
+        In questo caso Ã¨ rimandato all'activity ManageDiscount
+         */
         mFab = (FloatingActionButton) findViewById(R.id.fab);
         mFab.setOnClickListener(new View.OnClickListener() {
             @Override
@@ -71,6 +77,9 @@
         });
         progressBar=findViewById(R.id.sellerViewProgressBar);
         listView=findViewById(R.id.listView);
+        /*
+        Viene passato dal login o dalla registrazione via venditore appena eseguita l'id del venditore in modo da poterne eseguire le query
+         */
         Intent intent = getIntent();
         if(intent.hasExtra("UID")){
             UID=intent.getStringExtra("UID");
@@ -80,10 +89,12 @@
     @Override
     protected void onStart() {
         super.onStart();
+        //controllo per quanto riguarda la connessione internet
         NetworkController networkController =new NetworkController();
         if(!networkController.isConnected(SellerView.this)){
             networkController.connectionDialog(SellerView.this);
         }
+        //query al db che controlla se il venditore Ã¨ in possesso di un 'attivitÃ  e in tal caso ne prende gli sconti con delle query innestrate
         getSellerBusinessUID();
         if(businessUID == null){
             businessUID = new ArrayList<String>();
@@ -114,7 +125,10 @@
             logOut();
         }
     }
-
+    /**
+    Metodo che verifica se il venditore Ã¨ giÃ  in possesso di un'attivitÃ  in tal caso la query prosegue altrimenti
+    gli viene notificata l'assenza dell'attivitÃ 
+     */
     private void getSellerBusinessUID(){
         if(UID!=null){
             db.collection("venditore").document(this.UID).get().addOnCompleteListener(new OnCompleteListener<DocumentSnapshot>() {
@@ -124,13 +138,13 @@
                         DocumentSnapshot document= task.getResult();
                         businessUID= (ArrayList) document.get("businessUID");
                         //se ha delle attivitÃ  le recupera
-                        //Log.d("businessUID", String.valueOf(businessUID.size()));
                         if(businessUID!=null){
                             progressBar.setVisibility(View.VISIBLE);
+                            //in caso l'attivitÃ  ci sia vengono estratti dal db i relativi sconti
                             getBusiness();
                             progressBar.setVisibility(View.INVISIBLE);
                         }else{
-                            alert.setText("Nessuna attivitÃ  registrata");
+                            alert.setText(getResources().getString(R.string.noActivity));
                             addActivityButton.setVisibility(View.VISIBLE);
                             progressBar.setVisibility(View.INVISIBLE);
                         }
@@ -139,6 +153,10 @@
             });
         }
     }
+    /**
+    Metodo che prende gli id degli sconti e della relativa attivitÃ  per poi passarli nel ViewAdapter,inoltre sono settate alcune
+     importanti informazioni quali il nome dell'attivitÃ  di modo che l'interfaccia sia piÃ¹ user friendly per il venditore e la descrizione sconto
+     */
     private void getBusiness(){
         if(businessUID!=null && !businessUID.isEmpty()){
             addActivityButton.setVisibility(View.INVISIBLE);
@@ -154,21 +172,22 @@
                         if(task.isSuccessful()){
                             DocumentSnapshot document= task.getResult();
                             if (document.exists()) {
-                                //Log.d("TAG", "DocumentSnapshot data: " + document.getData());
                                 discountUID=(ArrayList) document.get("discountUID");
                                 String name = document.getString("name");
-                                scontiAttivita.setText( "Sconti " + name + ":");
-                                //Log.d("TAG", "uid dello sconto" + discountUID.toString());
+                                scontiAttivita.setText(getResources().getString(R.string.discount) + name + ":");
                                 if(discountUID!=null && !discountUID.isEmpty()){
+                                    //se l'attivitÃ  possiede degli sconti parte la query per l'estrazione degli uid relativi
                                     getDiscounts();
                                 }else{
-                                    alert.setText("Nessuno sconto disponibile");
+                                    /*
+                                    altrimenti viene settato l'adapter con un array vuoto e con l'utilizzo "sellerhome" questo consentirÃ  al ViewAdapter
+                                    di essere riusabile e di effettuare al suo interno un gioco di visibilitÃ 
+                                     */
+                                    alert.setText(getResources().getString(R.string.noDiscount));
                                     alert.setVisibility(View.VISIBLE);
                                     final ViewAdapter adapter=new ViewAdapter(SellerView.this,discountArray, UID,businessUID,"sellerHome");
                                     listView.setAdapter(adapter);
                                 }
-                            } else {
-                                Log.d("TAG", "No such document");
                             }
                         }
                     }
@@ -176,6 +195,11 @@
             }
         }
     }
+
+    /**
+     * Query che per ogni uid di sconti presenti nell'attivitÃ  preleva le informazioni del relativo sconto per poi settare il ViewAdapter
+     * con un array di sconti pieno
+     */
     private void getDiscounts(){
         discountArray.clear();
             for(int k=0;k<discountUID.size();k++){
@@ -203,19 +227,25 @@
                 });
             }
     }
-
+    /**
+     * Metodo che rimanda all'activity SellerMapView passando l'id del venditore per effettuare le query
+     */
     private void goSellerMapView(){
         final Intent intent = new Intent(this, SellerMapView.class);
         intent.putExtra("UID",UID);
         startActivity(intent);
     }
+    /**
+     * Metodo che riamnda all'activity manageDiscount passando l'id dell'attivitÃ  per effettuare le query
+     */
     private void startManageDiscount(){
         final Intent intent = new Intent(this, ManageDiscount.class);
         intent.putExtra("businessUID",businessUID.get(0));
-        //Log.d("u",businessUID.get(0).toString());
         startActivity(intent);
     }
-
+    /**
+     * Metodo che consente al venditore di tornare al login senza autenticazione
+     */
     private void logOut(){
         FirebaseAuth.getInstance().signOut();
         final Intent intent = new Intent(this, LogIn.class);
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\r\n    <string name=\"app_name\">WalkToShop</string>\r\n    <string name=\"action_settings\">Impostazioni</string>\r\n    <string name=\"action_exit\">Esci</string>\r\n    <string name=\"search\">search</string>\r\n    <string name=\"content_description_search\">contenuto</string>\r\n    <string name=\"action_home\">home</string>\r\n    <string name=\"action_map\">mappa</string>\r\n    <string name=\"action_statistics\">statistiche</string>\r\n    <string name=\"action_discount\">miei sconti</string>\r\n    <string name=\"action_notification\">notifiche</string>\r\n    <string name=\"action_search\">cerca</string>\r\n    <string name=\"snackbar_message\">Caricamento schermata di inserimento sconto</string>\r\n    <string name=\"snackbar_action\">CLOSE</string>\r\n    <string name=\"email\">Email</string>\r\n    <string name=\"password\">Password</string>\r\n    <string name=\"emailEmpty\">Inserire email</string>\r\n    <string name=\"passwordEmpty\">Inserire password</string>\r\n    <string name=\"usernameEmpty\">Inserire username</string>\r\n    <string name=\"heightEmpty\">Inserire altezza</string>\r\n    <string name=\"weightEmpty\">Inserire peso</string>\r\n    <string name=\"numStepsEmpty\">Inserire numero passi</string>\r\n    <string name=\"InvalidPassword\">Password non valida</string>\r\n    <string name=\"EqualPassword\">La password non corrisponde</string>\r\n    <string name=\"InvalidEmail\">Email non valida</string>\r\n    <string name=\"InvalidUsername\">Password non valida</string>\r\n    <string name=\"emailExists\">Email giÃ  esistente</string>\r\n    <string name=\"usernameExists\">Username giÃ  esistente</string>\r\n    <string name=\"weight\">Peso</string>\r\n    <string name=\"height\">Altezza</string>\r\n    <string name=\"InvalidWeight\">formato peso errato</string>\r\n    <string name=\"InvalidHeight\">formato altezza errato</string>\r\n    <string name=\"title_activity_seller_maps_view\">Map</string>\r\n    <string name=\"numStepsNotValid\">Numero passi non valido</string>\r\n    <string name=\"InvalidDescription\">Descrizione non valida</string>\r\n    <string name=\"InvalidDateFormat\">Formato data errato</string>\r\n    <string name=\"InvalidDate\">Data errata</string>\r\n    <string name=\"EmptyDate\">Inserire data di scadenza</string>\r\n    <string name=\"NotADay\">Giorno non esistente</string>\r\n    <string name=\"NotAMonth\">Mese non esistente</string>\r\n    <string name=\"NotAYearFree\">Anno errato</string>\r\n    //framgent_manageDiscount\r\n    <string name=\"disocuntsQuantity\">Passi da compiere per lo sconto</string>\r\n    <string name=\"percentage\">Percentuale</string>\r\n    <string name=\"description\">Descrizione</string>\r\n    <string name=\"expiringDate\">Data di scadenza</string>\r\n    <string name=\"add\">Aggiungi</string>\r\n    //dialog\r\n    <string name=\"yes\">Si</string>\r\n    <string name=\"no\">No</string>\r\n    <string name=\"ok\">Ok</string>\r\n    <string name=\"businessNotFound\">Ci dispiace!LocalitÃ  non trovata.Riprovare</string>\r\n    <string name=\"emptyBusiness\">Non possiedi attivitÃ ! Per registrarne una clicca il bottone in basso a destra!</string>\r\n    <string name=\"DialogFirstTime\">Hai appena attivato il contapassi, questo vale per tutti i tuoi sconti nella Home. Per avere una accurata rilevazione deponi il dispositivo in tasca, fai le tue camminate e alla fine ricordati di disattivarlo per vedere i tuoi risultati!!</string>\r\n    <string name=\"action_stepcounter\">Pedometro</string>\r\n    <string name=\"addBusinessDialog\">Cliccare sul marker in rosso, per confermare l\\'inserimento dell\\'attivitÃ </string>\r\n    //networkcontroller\r\n    <string name=\"connect\">Connettiti</string>\r\n    <string name=\"Undo\">Annulla</string>\r\n    <string name=\"internetFail\">Connessione internet troppo debole o assente.</string>\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(revision 6bb7bbd607eb0685651cf3a739294993f9576e4f)
+++ app/src/main/res/values/strings.xml	(date 1612350829406)
@@ -58,4 +58,15 @@
     <string name="connect">Connettiti</string>
     <string name="Undo">Annulla</string>
     <string name="internetFail">Connessione internet troppo debole o assente.</string>
+    //manageDiscount
+    <string name="correctInfo">Inserimento sconto avvenuto con successo!</string>
+    <string name="expiringDialog">Data di scadenza(gg/mm/aaaa)</string>
+    <string name="notSupportedVersion">Inserire la data manualmente, poichÃ¨ la versione del tuo dispositivo non supporta l inserimento automatico tramite calendario</string>
+    <string name="dateFormat">Rispettare formato: gg/mm/aaaa</string>
+    <string name="stepRange">Inserire un numero passi che sia compreso tra 2000 e 100000</string>
+    <string name="invalidDate">Data non valida</string>
+    //SellerView
+    <string name="noActivity">Nessuna attivitÃ  registrata</string>
+    <string name="discount"> Sconti </string>
+    <string name="noDiscount">Nessuno sconto disponibile</string>
 </resources>
\ No newline at end of file
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_29_01_2021_15_31__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Update_at_29_01_2021_15_31__Default_Changelist_1.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_01_02_2021_12_28__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_01_02_2021_12_28__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_16_41__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_16_41__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_02_02_2021_17_52__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_02_02_2021_17_52__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_16_52__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_16_52__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_10_35__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_28_01_2021_10_35__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_29_01_2021_15_31__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_29_01_2021_15_31__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_02_02_2021_15_34__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_02_02_2021_15_34__Default_Changelist_.xml
